
Lab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000068  00800100  0000030a  0000039e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000030a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000045  00800168  00800168  00000406  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000406  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000438  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000478  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fa4  00000000  00000000  00000580  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a15  00000000  00000000  00001524  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000940  00000000  00000000  00001f39  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c8  00000000  00000000  0000287c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000620  00000000  00000000  00002b44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bc1  00000000  00000000  00003164  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00003d25  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__ctors_end>
   4:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
   8:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
   c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  10:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  14:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  18:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  1c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  20:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  24:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  28:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  2c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  30:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  34:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  38:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  3c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  40:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  44:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  48:	0c 94 c4 00 	jmp	0x188	; 0x188 <__vector_18>
  4c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__vector_19>
  50:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  54:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  58:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  5c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  60:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  64:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	42 75       	andi	r20, 0x52	; 82
  6a:	66 66       	ori	r22, 0x66	; 102
  6c:	65 72       	andi	r22, 0x25	; 37
  6e:	20 6f       	ori	r18, 0xF0	; 240
  70:	76 65       	ori	r23, 0x56	; 86
  72:	72 66       	ori	r23, 0x62	; 98
  74:	6c 6f       	ori	r22, 0xFC	; 252
  76:	77 20       	and	r7, r7
  78:	65 72       	andi	r22, 0x25	; 37
  7a:	72 6f       	ori	r23, 0xF2	; 242
  7c:	72 3a       	cpi	r23, 0xA2	; 162
  7e:	20 00       	.word	0x0020	; ????

00000080 <__c.2339>:
  80:	55 41 52 54 20 4f 76 65 72 72 75 6e 20 45 72 72     UART Overrun Err
  90:	6f 72 3a 20 00                                      or: .

00000095 <__c.2337>:
  95:	55 41 52 54 20 46 72 61 6d 65 20 45 72 72 6f 72     UART Frame Error
  a5:	3a 20 00                                            : .

000000a8 <__ctors_end>:
  a8:	11 24       	eor	r1, r1
  aa:	1f be       	out	0x3f, r1	; 63
  ac:	cf ef       	ldi	r28, 0xFF	; 255
  ae:	d8 e0       	ldi	r29, 0x08	; 8
  b0:	de bf       	out	0x3e, r29	; 62
  b2:	cd bf       	out	0x3d, r28	; 61

000000b4 <__do_copy_data>:
  b4:	11 e0       	ldi	r17, 0x01	; 1
  b6:	a0 e0       	ldi	r26, 0x00	; 0
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	ea e0       	ldi	r30, 0x0A	; 10
  bc:	f3 e0       	ldi	r31, 0x03	; 3
  be:	02 c0       	rjmp	.+4      	; 0xc4 <__do_copy_data+0x10>
  c0:	05 90       	lpm	r0, Z+
  c2:	0d 92       	st	X+, r0
  c4:	a8 36       	cpi	r26, 0x68	; 104
  c6:	b1 07       	cpc	r27, r17
  c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0xc>

000000ca <__do_clear_bss>:
  ca:	21 e0       	ldi	r18, 0x01	; 1
  cc:	a8 e6       	ldi	r26, 0x68	; 104
  ce:	b1 e0       	ldi	r27, 0x01	; 1
  d0:	01 c0       	rjmp	.+2      	; 0xd4 <.do_clear_bss_start>

000000d2 <.do_clear_bss_loop>:
  d2:	1d 92       	st	X+, r1

000000d4 <.do_clear_bss_start>:
  d4:	ad 3a       	cpi	r26, 0xAD	; 173
  d6:	b2 07       	cpc	r27, r18
  d8:	e1 f7       	brne	.-8      	; 0xd2 <.do_clear_bss_loop>
  da:	0e 94 a2 00 	call	0x144	; 0x144 <main>
  de:	0c 94 83 01 	jmp	0x306	; 0x306 <_exit>

000000e2 <__bad_interrupt>:
  e2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e6 <ADC_Init>:
	return ones + (((float) tenths)/10.0) + (((float) hundredths)/100.0);
}

unsigned char convertFloatToChar(float input){
	return (input / 5.0) * 255;
	};
  e6:	ec e7       	ldi	r30, 0x7C	; 124
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	80 64       	ori	r24, 0x40	; 64
  ee:	80 83       	st	Z, r24
  f0:	80 81       	ld	r24, Z
  f2:	8f 77       	andi	r24, 0x7F	; 127
  f4:	80 83       	st	Z, r24
  f6:	ea e7       	ldi	r30, 0x7A	; 122
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	87 68       	ori	r24, 0x87	; 135
  fe:	80 83       	st	Z, r24
 100:	08 95       	ret

00000102 <read_UART>:

unsigned int read_UART(){
 102:	cf 93       	push	r28
 104:	df 93       	push	r29
	
	uart_init( UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU) );
 106:	87 e6       	ldi	r24, 0x67	; 103
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 94 1c 01 	call	0x238	; 0x238 <uart_init>
	unsigned int c = uart_getc();
 10e:	0e 94 35 01 	call	0x26a	; 0x26a <uart_getc>
 112:	ec 01       	movw	r28, r24
	
	if ( c & UART_NO_DATA )
 114:	90 fd       	sbrc	r25, 0
 116:	12 c0       	rjmp	.+36     	; 0x13c <read_UART+0x3a>
        {
            /*
             * new data available from UART
             * check for Frame or Overrun error
             */
            if ( c & UART_FRAME_ERROR )
 118:	94 ff       	sbrs	r25, 4
 11a:	04 c0       	rjmp	.+8      	; 0x124 <read_UART+0x22>
            {
                /* Framing Error detected, i.e no stop bit detected */
                uart_puts_P("UART Frame Error: ");
 11c:	85 e9       	ldi	r24, 0x95	; 149
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	0e 94 74 01 	call	0x2e8	; 0x2e8 <uart_puts_p>
            }
            if ( c & UART_OVERRUN_ERROR )
 124:	d3 ff       	sbrs	r29, 3
 126:	04 c0       	rjmp	.+8      	; 0x130 <read_UART+0x2e>
                /* 
                 * Overrun, a character already present in the UART UDR register was 
                 * not read by the interrupt handler before the next character arrived,
                 * one or more received characters have been dropped
                 */
                uart_puts_P("UART Overrun Error: ");
 128:	80 e8       	ldi	r24, 0x80	; 128
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	0e 94 74 01 	call	0x2e8	; 0x2e8 <uart_puts_p>
            }
            if ( c & UART_BUFFER_OVERFLOW )
 130:	d1 ff       	sbrs	r29, 1
 132:	04 c0       	rjmp	.+8      	; 0x13c <read_UART+0x3a>
            {
                /* 
                 * We are not reading the receive buffer fast enough,
                 * one or more received character have been dropped 
                 */
                uart_puts_P("Buffer overflow error: ");
 134:	88 e6       	ldi	r24, 0x68	; 104
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	0e 94 74 01 	call	0x2e8	; 0x2e8 <uart_puts_p>
        }
		
		return c;
	 
	
}
 13c:	ce 01       	movw	r24, r28
 13e:	df 91       	pop	r29
 140:	cf 91       	pop	r28
 142:	08 95       	ret

00000144 <main>:
    unsigned int c;
	uint16_t ADC_value;
	
	uint8_t sinewave[64] = {128, 141, 153, 165, 177, 188, 199, 209, 219, 227, 234, 241, 246, 250, 254, 255, 255, 255, 254, 250, 246, 241, 234, 227, 219, 209, 199, 188, 177, 165, 153, 141, 128, 115, 103, 91, 79, 68, 57, 47, 37, 29, 22, 15, 10, 6, 2, 1, 0, 1, 2, 6, 10, 15, 22, 29, 37, 47, 57, 68, 79, 91, 103, 115};
	
    uart_init( UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU) ); 
 144:	87 e6       	ldi	r24, 0x67	; 103
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	0e 94 1c 01 	call	0x238	; 0x238 <uart_init>
    
    /*
     * now enable interrupt, since UART library is interrupt controlled
     */
    sei();
 14c:	78 94       	sei
	
	ADC_Init();
 14e:	0e 94 73 00 	call	0xe6	; 0xe6 <ADC_Init>
	i2c_init();
 152:	0e 94 be 00 	call	0x17c	; 0x17c <i2c_init>
	
   
    uart_puts("Welcome to program.\n");
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	91 e0       	ldi	r25, 0x01	; 1
 15a:	0e 94 68 01 	call	0x2d0	; 0x2d0 <uart_puts>
	uart_puts("Please enter command:\n");
 15e:	85 e1       	ldi	r24, 0x15	; 21
 160:	91 e0       	ldi	r25, 0x01	; 1
 162:	0e 94 68 01 	call	0x2d0	; 0x2d0 <uart_puts>
   
    
    while(1)
    {
        
		uart_puts("Testing\n");
 166:	8c e2       	ldi	r24, 0x2C	; 44
 168:	91 e0       	ldi	r25, 0x01	; 1
 16a:	0e 94 68 01 	call	0x2d0	; 0x2d0 <uart_puts>
        c = read_UART();
 16e:	0e 94 81 00 	call	0x102	; 0x102 <read_UART>
		
		if(c && UART_NO_DATA){
 172:	89 2b       	or	r24, r25
 174:	c1 f7       	brne	.-16     	; 0x166 <main+0x22>
				
			}
			
		}
		else {
			uart_puts("Error. Command not recognized. Please try again.\n");
 176:	85 e3       	ldi	r24, 0x35	; 53
 178:	91 e0       	ldi	r25, 0x01	; 1
 17a:	f3 cf       	rjmp	.-26     	; 0x162 <main+0x1e>

0000017c <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
 17c:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
 180:	88 e4       	ldi	r24, 0x48	; 72
 182:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 186:	08 95       	ret

00000188 <__vector_18>:
ISR (UART0_RECEIVE_INTERRUPT)	
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
 188:	1f 92       	push	r1
 18a:	0f 92       	push	r0
 18c:	0f b6       	in	r0, 0x3f	; 63
 18e:	0f 92       	push	r0
 190:	11 24       	eor	r1, r1
 192:	2f 93       	push	r18
 194:	8f 93       	push	r24
 196:	9f 93       	push	r25
 198:	ef 93       	push	r30
 19a:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */
    usr  = UART0_STATUS;
 19c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    data = UART0_DATA;
 1a0:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    
    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
#if defined(FE) && defined(DOR) && defined(UPE)
    lastRxError = usr & (_BV(FE)|_BV(DOR)|_BV(UPE) );
#elif defined(FE0) && defined(DOR0) && defined(UPE0)
    lastRxError = usr & (_BV(FE0)|_BV(DOR0)|_BV(UPE0) );
 1a4:	8c 71       	andi	r24, 0x1C	; 28
#elif defined(FE) && defined(DOR)
    lastRxError = usr & (_BV(FE)|_BV(DOR) );
#endif

    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
 1a6:	e0 91 6a 01 	lds	r30, 0x016A	; 0x80016a <UART_RxHead>
 1aa:	ef 5f       	subi	r30, 0xFF	; 255
 1ac:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART_RxTail ) {
 1ae:	20 91 69 01 	lds	r18, 0x0169	; 0x800169 <UART_RxTail>
 1b2:	e2 17       	cp	r30, r18
 1b4:	39 f0       	breq	.+14     	; 0x1c4 <__vector_18+0x3c>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
 1b6:	e0 93 6a 01 	sts	0x016A, r30	; 0x80016a <UART_RxHead>
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	e3 59       	subi	r30, 0x93	; 147
 1be:	fe 4f       	sbci	r31, 0xFE	; 254
 1c0:	90 83       	st	Z, r25
 1c2:	01 c0       	rjmp	.+2      	; 0x1c6 <__vector_18+0x3e>
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 1c4:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;   
 1c6:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <__data_end>
 1ca:	89 2b       	or	r24, r25
 1cc:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <__data_end>
}
 1d0:	ff 91       	pop	r31
 1d2:	ef 91       	pop	r30
 1d4:	9f 91       	pop	r25
 1d6:	8f 91       	pop	r24
 1d8:	2f 91       	pop	r18
 1da:	0f 90       	pop	r0
 1dc:	0f be       	out	0x3f, r0	; 63
 1de:	0f 90       	pop	r0
 1e0:	1f 90       	pop	r1
 1e2:	18 95       	reti

000001e4 <__vector_19>:
ISR (UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
 1e4:	1f 92       	push	r1
 1e6:	0f 92       	push	r0
 1e8:	0f b6       	in	r0, 0x3f	; 63
 1ea:	0f 92       	push	r0
 1ec:	11 24       	eor	r1, r1
 1ee:	8f 93       	push	r24
 1f0:	9f 93       	push	r25
 1f2:	ef 93       	push	r30
 1f4:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
 1f6:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <UART_TxHead>
 1fa:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <UART_TxTail>
 1fe:	98 17       	cp	r25, r24
 200:	69 f0       	breq	.+26     	; 0x21c <__vector_19+0x38>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 202:	e0 91 6b 01 	lds	r30, 0x016B	; 0x80016b <UART_TxTail>
 206:	ef 5f       	subi	r30, 0xFF	; 255
 208:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
 20a:	e0 93 6b 01 	sts	0x016B, r30	; 0x80016b <UART_TxTail>
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	e3 57       	subi	r30, 0x73	; 115
 212:	fe 4f       	sbci	r31, 0xFE	; 254
 214:	80 81       	ld	r24, Z
 216:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 21a:	05 c0       	rjmp	.+10     	; 0x226 <__vector_19+0x42>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 21c:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 220:	8f 7d       	andi	r24, 0xDF	; 223
 222:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    }
}
 226:	ff 91       	pop	r31
 228:	ef 91       	pop	r30
 22a:	9f 91       	pop	r25
 22c:	8f 91       	pop	r24
 22e:	0f 90       	pop	r0
 230:	0f be       	out	0x3f, r0	; 63
 232:	0f 90       	pop	r0
 234:	1f 90       	pop	r1
 236:	18 95       	reti

00000238 <uart_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
 238:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <UART_TxHead>
    UART_TxTail = 0;
 23c:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <UART_TxTail>
    UART_RxHead = 0;
 240:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <UART_RxHead>
    UART_RxTail = 0;
 244:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <UART_RxTail>
#endif
#endif
#endif

    /* Set baud rate */
    if ( baudrate & 0x8000 )
 248:	97 ff       	sbrs	r25, 7
 24a:	03 c0       	rjmp	.+6      	; 0x252 <uart_init+0x1a>
    {
        #if UART0_BIT_U2X
        UART0_STATUS = (1<<UART0_BIT_U2X);  //Enable 2x speed 
 24c:	22 e0       	ldi	r18, 0x02	; 2
 24e:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
        #endif
    } 
    #if defined(UART0_UBRRH)
    UART0_UBRRH = (unsigned char)((baudrate>>8)&0x80) ;
 252:	90 78       	andi	r25, 0x80	; 128
 254:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    #endif    
    UART0_UBRRL = (unsigned char) (baudrate&0x00FF);
 258:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
      
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(UART0_BIT_RXCIE)|(1<<UART0_BIT_RXEN)|(1<<UART0_BIT_TXEN);
 25c:	88 e9       	ldi	r24, 0x98	; 152
 25e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef UART0_CONTROLC
    #ifdef UART0_BIT_URSEL
    UART0_CONTROLC = (1<<UART0_BIT_URSEL)|(1<<UART0_BIT_UCSZ1)|(1<<UART0_BIT_UCSZ0);
    #else
    UART0_CONTROLC = (1<<UART0_BIT_UCSZ1)|(1<<UART0_BIT_UCSZ0);
 262:	86 e0       	ldi	r24, 0x06	; 6
 264:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 268:	08 95       	ret

0000026a <uart_getc>:
    unsigned char tmptail;
    unsigned char data;
    unsigned char lastRxError;


    if ( UART_RxHead == UART_RxTail ) {
 26a:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <UART_RxHead>
 26e:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <UART_RxTail>
 272:	98 17       	cp	r25, r24
 274:	a9 f0       	breq	.+42     	; 0x2a0 <uart_getc+0x36>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
 276:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <UART_RxTail>
 27a:	9f 5f       	subi	r25, 0xFF	; 255
 27c:	9f 71       	andi	r25, 0x1F	; 31
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
 27e:	e9 2f       	mov	r30, r25
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	e3 59       	subi	r30, 0x93	; 147
 284:	fe 4f       	sbci	r31, 0xFE	; 254
 286:	20 81       	ld	r18, Z
    lastRxError = UART_LastRxError;
 288:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <__data_end>
    
    /* store buffer index */
    UART_RxTail = tmptail; 
 28c:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <UART_RxTail>
    
    UART_LastRxError = 0;
 290:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <__data_end>
    return (lastRxError << 8) + data;
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	98 2f       	mov	r25, r24
 298:	88 27       	eor	r24, r24
 29a:	82 0f       	add	r24, r18
 29c:	91 1d       	adc	r25, r1
 29e:	08 95       	ret
    unsigned char data;
    unsigned char lastRxError;


    if ( UART_RxHead == UART_RxTail ) {
        return UART_NO_DATA;   /* no data available */
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	91 e0       	ldi	r25, 0x01	; 1
    UART_RxTail = tmptail; 
    
    UART_LastRxError = 0;
    return (lastRxError << 8) + data;

}/* uart_getc */
 2a4:	08 95       	ret

000002a6 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 2a6:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <UART_TxHead>
 2aa:	9f 5f       	subi	r25, 0xFF	; 255
 2ac:	9f 71       	andi	r25, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
 2ae:	20 91 6b 01 	lds	r18, 0x016B	; 0x80016b <UART_TxTail>
 2b2:	92 17       	cp	r25, r18
 2b4:	e1 f3       	breq	.-8      	; 0x2ae <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
 2b6:	e9 2f       	mov	r30, r25
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
 2ba:	e3 57       	subi	r30, 0x73	; 115
 2bc:	fe 4f       	sbci	r31, 0xFE	; 254
 2be:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
 2c0:	90 93 6c 01 	sts	0x016C, r25	; 0x80016c <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
 2c4:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 2c8:	80 62       	ori	r24, 0x20	; 32
 2ca:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 2ce:	08 95       	ret

000002d0 <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
 2d0:	cf 93       	push	r28
 2d2:	df 93       	push	r29
 2d4:	ec 01       	movw	r28, r24
    while (*s) 
 2d6:	89 91       	ld	r24, Y+
 2d8:	88 23       	and	r24, r24
 2da:	19 f0       	breq	.+6      	; 0x2e2 <uart_puts+0x12>
      uart_putc(*s++);
 2dc:	0e 94 53 01 	call	0x2a6	; 0x2a6 <uart_putc>
 2e0:	fa cf       	rjmp	.-12     	; 0x2d6 <uart_puts+0x6>

}/* uart_puts */
 2e2:	df 91       	pop	r29
 2e4:	cf 91       	pop	r28
 2e6:	08 95       	ret

000002e8 <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
 2e8:	cf 93       	push	r28
 2ea:	df 93       	push	r29
 2ec:	fc 01       	movw	r30, r24
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
 2ee:	84 91       	lpm	r24, Z
 2f0:	ef 01       	movw	r28, r30
 2f2:	21 96       	adiw	r28, 0x01	; 1
 2f4:	88 23       	and	r24, r24
 2f6:	21 f0       	breq	.+8      	; 0x300 <uart_puts_p+0x18>
      uart_putc(c);
 2f8:	0e 94 53 01 	call	0x2a6	; 0x2a6 <uart_putc>
 2fc:	fe 01       	movw	r30, r28
 2fe:	f7 cf       	rjmp	.-18     	; 0x2ee <uart_puts_p+0x6>

}/* uart_puts_p */
 300:	df 91       	pop	r29
 302:	cf 91       	pop	r28
 304:	08 95       	ret

00000306 <_exit>:
 306:	f8 94       	cli

00000308 <__stop_program>:
 308:	ff cf       	rjmp	.-2      	; 0x308 <__stop_program>
