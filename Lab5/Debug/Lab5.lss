
Lab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000e2  00800100  00000ef6  00000f8a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ef6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000045  008001e2  008001e2  0000106c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000106c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000109c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  000010dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001865  00000000  00000000  000011e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a9f  00000000  00000000  00002a49  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c4f  00000000  00000000  000034e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002d8  00000000  00000000  00004138  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000679  00000000  00000000  00004410  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001463  00000000  00000000  00004a89  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  00005eec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__ctors_end>
   4:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
   8:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
   c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  10:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  14:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  18:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  1c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  20:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  24:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  28:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  2c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  30:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  34:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  38:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  3c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  40:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  44:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  48:	0c 94 2c 04 	jmp	0x858	; 0x858 <__vector_18>
  4c:	0c 94 5a 04 	jmp	0x8b4	; 0x8b4 <__vector_19>
  50:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  54:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  58:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  5c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  60:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  64:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	42 75       	andi	r20, 0x52	; 82
  6a:	66 66       	ori	r22, 0x66	; 102
  6c:	65 72       	andi	r22, 0x25	; 37
  6e:	20 6f       	ori	r18, 0xF0	; 240
  70:	76 65       	ori	r23, 0x56	; 86
  72:	72 66       	ori	r23, 0x62	; 98
  74:	6c 6f       	ori	r22, 0xFC	; 252
  76:	77 20       	and	r7, r7
  78:	65 72       	andi	r22, 0x25	; 37
  7a:	72 6f       	ori	r23, 0xF2	; 242
  7c:	72 3a       	cpi	r23, 0xA2	; 162
  7e:	20 00       	.word	0x0020	; ????

00000080 <__c.2339>:
  80:	55 41 52 54 20 4f 76 65 72 72 75 6e 20 45 72 72     UART Overrun Err
  90:	6f 72 3a 20 00                                      or: .

00000095 <__c.2337>:
  95:	55 41 52 54 20 46 72 61 6d 65 20 45 72 72 6f 72     UART Frame Error
  a5:	3a 20 00                                            : .

000000a8 <__ctors_end>:
  a8:	11 24       	eor	r1, r1
  aa:	1f be       	out	0x3f, r1	; 63
  ac:	cf ef       	ldi	r28, 0xFF	; 255
  ae:	d8 e0       	ldi	r29, 0x08	; 8
  b0:	de bf       	out	0x3e, r29	; 62
  b2:	cd bf       	out	0x3d, r28	; 61

000000b4 <__do_copy_data>:
  b4:	11 e0       	ldi	r17, 0x01	; 1
  b6:	a0 e0       	ldi	r26, 0x00	; 0
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	e6 ef       	ldi	r30, 0xF6	; 246
  bc:	fe e0       	ldi	r31, 0x0E	; 14
  be:	02 c0       	rjmp	.+4      	; 0xc4 <__do_copy_data+0x10>
  c0:	05 90       	lpm	r0, Z+
  c2:	0d 92       	st	X+, r0
  c4:	a2 3e       	cpi	r26, 0xE2	; 226
  c6:	b1 07       	cpc	r27, r17
  c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0xc>

000000ca <__do_clear_bss>:
  ca:	22 e0       	ldi	r18, 0x02	; 2
  cc:	a2 ee       	ldi	r26, 0xE2	; 226
  ce:	b1 e0       	ldi	r27, 0x01	; 1
  d0:	01 c0       	rjmp	.+2      	; 0xd4 <.do_clear_bss_start>

000000d2 <.do_clear_bss_loop>:
  d2:	1d 92       	st	X+, r1

000000d4 <.do_clear_bss_start>:
  d4:	a7 32       	cpi	r26, 0x27	; 39
  d6:	b2 07       	cpc	r27, r18
  d8:	e1 f7       	brne	.-8      	; 0xd2 <.do_clear_bss_loop>
  da:	0e 94 06 02 	call	0x40c	; 0x40c <main>
  de:	0c 94 79 07 	jmp	0xef2	; 0xef2 <_exit>

000000e2 <__bad_interrupt>:
  e2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e6 <itoa16>:
	return ones + (((float) tenths)/10.0) + (((float) hundredths)/100.0);
}

unsigned char convertFloatToChar(float input){
	return (input / 5.0) * 255;
	};
  e6:	ef 92       	push	r14
  e8:	ff 92       	push	r15
  ea:	0f 93       	push	r16
  ec:	1f 93       	push	r17
  ee:	cf 93       	push	r28
  f0:	df 93       	push	r29
  f2:	00 d0       	rcall	.+0      	; 0xf4 <itoa16+0xe>
  f4:	00 d0       	rcall	.+0      	; 0xf6 <itoa16+0x10>
  f6:	00 d0       	rcall	.+0      	; 0xf8 <itoa16+0x12>
  f8:	cd b7       	in	r28, 0x3d	; 61
  fa:	de b7       	in	r29, 0x3e	; 62
  fc:	ac 01       	movw	r20, r24
  fe:	fb 01       	movw	r30, r22
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	0a e0       	ldi	r16, 0x0A	; 10
 104:	10 e0       	ldi	r17, 0x00	; 0
 106:	21 e0       	ldi	r18, 0x01	; 1
 108:	29 0f       	add	r18, r25
 10a:	ee 24       	eor	r14, r14
 10c:	e3 94       	inc	r14
 10e:	f1 2c       	mov	r15, r1
 110:	ec 0e       	add	r14, r28
 112:	fd 1e       	adc	r15, r29
 114:	e9 0e       	add	r14, r25
 116:	f1 1c       	adc	r15, r1
 118:	97 fd       	sbrc	r25, 7
 11a:	fa 94       	dec	r15
 11c:	ca 01       	movw	r24, r20
 11e:	b8 01       	movw	r22, r16
 120:	0e 94 24 07 	call	0xe48	; 0xe48 <__udivmodhi4>
 124:	80 5d       	subi	r24, 0xD0	; 208
 126:	d7 01       	movw	r26, r14
 128:	8c 93       	st	X, r24
 12a:	ab 01       	movw	r20, r22
 12c:	92 2f       	mov	r25, r18
 12e:	67 2b       	or	r22, r23
 130:	51 f7       	brne	.-44     	; 0x106 <itoa16+0x20>
 132:	bf 01       	movw	r22, r30
 134:	82 2f       	mov	r24, r18
 136:	18 16       	cp	r1, r24
 138:	6c f4       	brge	.+26     	; 0x154 <itoa16+0x6e>
 13a:	81 50       	subi	r24, 0x01	; 1
 13c:	41 e0       	ldi	r20, 0x01	; 1
 13e:	50 e0       	ldi	r21, 0x00	; 0
 140:	4c 0f       	add	r20, r28
 142:	5d 1f       	adc	r21, r29
 144:	48 0f       	add	r20, r24
 146:	51 1d       	adc	r21, r1
 148:	da 01       	movw	r26, r20
 14a:	9c 91       	ld	r25, X
 14c:	db 01       	movw	r26, r22
 14e:	9d 93       	st	X+, r25
 150:	bd 01       	movw	r22, r26
 152:	f1 cf       	rjmp	.-30     	; 0x136 <itoa16+0x50>
 154:	82 2f       	mov	r24, r18
 156:	27 fd       	sbrc	r18, 7
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	e8 0f       	add	r30, r24
 15c:	f1 1d       	adc	r31, r1
 15e:	87 fd       	sbrc	r24, 7
 160:	fa 95       	dec	r31
 162:	10 82       	st	Z, r1
 164:	26 96       	adiw	r28, 0x06	; 6
 166:	0f b6       	in	r0, 0x3f	; 63
 168:	f8 94       	cli
 16a:	de bf       	out	0x3e, r29	; 62
 16c:	0f be       	out	0x3f, r0	; 63
 16e:	cd bf       	out	0x3d, r28	; 61
 170:	df 91       	pop	r29
 172:	cf 91       	pop	r28
 174:	1f 91       	pop	r17
 176:	0f 91       	pop	r16
 178:	ff 90       	pop	r15
 17a:	ef 90       	pop	r14
 17c:	08 95       	ret

0000017e <ADC_Init>:
 17e:	ec e7       	ldi	r30, 0x7C	; 124
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	80 81       	ld	r24, Z
 184:	80 64       	ori	r24, 0x40	; 64
 186:	80 83       	st	Z, r24
 188:	80 81       	ld	r24, Z
 18a:	8f 77       	andi	r24, 0x7F	; 127
 18c:	80 83       	st	Z, r24
 18e:	ea e7       	ldi	r30, 0x7A	; 122
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	80 81       	ld	r24, Z
 194:	87 68       	ori	r24, 0x87	; 135
 196:	80 83       	st	Z, r24
 198:	08 95       	ret

0000019a <ADC_Read>:
 19a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 19e:	80 64       	ori	r24, 0x40	; 64
 1a0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 1a4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 1a8:	86 fd       	sbrc	r24, 6
 1aa:	fc cf       	rjmp	.-8      	; 0x1a4 <ADC_Read+0xa>
 1ac:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 1b0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 1b4:	08 95       	ret

000001b6 <float_to_ascii>:
 1b6:	2f 92       	push	r2
 1b8:	3f 92       	push	r3
 1ba:	4f 92       	push	r4
 1bc:	5f 92       	push	r5
 1be:	7f 92       	push	r7
 1c0:	8f 92       	push	r8
 1c2:	9f 92       	push	r9
 1c4:	af 92       	push	r10
 1c6:	bf 92       	push	r11
 1c8:	cf 92       	push	r12
 1ca:	df 92       	push	r13
 1cc:	ef 92       	push	r14
 1ce:	ff 92       	push	r15
 1d0:	0f 93       	push	r16
 1d2:	1f 93       	push	r17
 1d4:	cf 93       	push	r28
 1d6:	df 93       	push	r29
 1d8:	4b 01       	movw	r8, r22
 1da:	5c 01       	movw	r10, r24
 1dc:	8a 01       	movw	r16, r20
 1de:	20 e0       	ldi	r18, 0x00	; 0
 1e0:	30 e0       	ldi	r19, 0x00	; 0
 1e2:	a9 01       	movw	r20, r18
 1e4:	0e 94 58 05 	call	0xab0	; 0xab0 <__cmpsf2>
 1e8:	87 fd       	sbrc	r24, 7
 1ea:	18 c0       	rjmp	.+48     	; 0x21c <float_to_ascii+0x66>
 1ec:	c5 01       	movw	r24, r10
 1ee:	b4 01       	movw	r22, r8
 1f0:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fixsfsi>
 1f4:	6b 01       	movw	r12, r22
 1f6:	7c 01       	movw	r14, r24
 1f8:	0e 94 07 06 	call	0xc0e	; 0xc0e <__floatsisf>
 1fc:	9b 01       	movw	r18, r22
 1fe:	ac 01       	movw	r20, r24
 200:	c5 01       	movw	r24, r10
 202:	b4 01       	movw	r22, r8
 204:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <__subsf3>
 208:	20 e0       	ldi	r18, 0x00	; 0
 20a:	30 e0       	ldi	r19, 0x00	; 0
 20c:	48 ec       	ldi	r20, 0xC8	; 200
 20e:	52 e4       	ldi	r21, 0x42	; 66
 210:	0e 94 b7 06 	call	0xd6e	; 0xd6e <__mulsf3>
 214:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fixsfsi>
 218:	71 2c       	mov	r7, r1
 21a:	1c c0       	rjmp	.+56     	; 0x254 <float_to_ascii+0x9e>
 21c:	b7 fa       	bst	r11, 7
 21e:	b0 94       	com	r11
 220:	b7 f8       	bld	r11, 7
 222:	b0 94       	com	r11
 224:	c5 01       	movw	r24, r10
 226:	b4 01       	movw	r22, r8
 228:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fixsfsi>
 22c:	6b 01       	movw	r12, r22
 22e:	7c 01       	movw	r14, r24
 230:	0e 94 07 06 	call	0xc0e	; 0xc0e <__floatsisf>
 234:	9b 01       	movw	r18, r22
 236:	ac 01       	movw	r20, r24
 238:	c5 01       	movw	r24, r10
 23a:	b4 01       	movw	r22, r8
 23c:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <__subsf3>
 240:	20 e0       	ldi	r18, 0x00	; 0
 242:	30 e0       	ldi	r19, 0x00	; 0
 244:	4a e7       	ldi	r20, 0x7A	; 122
 246:	54 e4       	ldi	r21, 0x44	; 68
 248:	0e 94 b7 06 	call	0xd6e	; 0xd6e <__mulsf3>
 24c:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fixsfsi>
 250:	77 24       	eor	r7, r7
 252:	73 94       	inc	r7
 254:	d0 e0       	ldi	r29, 0x00	; 0
 256:	2a e0       	ldi	r18, 0x0A	; 10
 258:	22 2e       	mov	r2, r18
 25a:	31 2c       	mov	r3, r1
 25c:	41 2c       	mov	r4, r1
 25e:	51 2c       	mov	r5, r1
 260:	16 16       	cp	r1, r22
 262:	17 06       	cpc	r1, r23
 264:	18 06       	cpc	r1, r24
 266:	19 06       	cpc	r1, r25
 268:	74 f4       	brge	.+28     	; 0x286 <float_to_ascii+0xd0>
 26a:	58 01       	movw	r10, r16
 26c:	ad 0e       	add	r10, r29
 26e:	b1 1c       	adc	r11, r1
 270:	a2 01       	movw	r20, r4
 272:	91 01       	movw	r18, r2
 274:	0e 94 38 07 	call	0xe70	; 0xe70 <__divmodsi4>
 278:	60 5d       	subi	r22, 0xD0	; 208
 27a:	f5 01       	movw	r30, r10
 27c:	60 83       	st	Z, r22
 27e:	b9 01       	movw	r22, r18
 280:	ca 01       	movw	r24, r20
 282:	df 5f       	subi	r29, 0xFF	; 255
 284:	ed cf       	rjmp	.-38     	; 0x260 <float_to_ascii+0xaa>
 286:	d1 11       	cpse	r29, r1
 288:	04 c0       	rjmp	.+8      	; 0x292 <float_to_ascii+0xdc>
 28a:	80 e3       	ldi	r24, 0x30	; 48
 28c:	f8 01       	movw	r30, r16
 28e:	80 83       	st	Z, r24
 290:	d1 e0       	ldi	r29, 0x01	; 1
 292:	c1 e0       	ldi	r28, 0x01	; 1
 294:	cd 0f       	add	r28, r29
 296:	f8 01       	movw	r30, r16
 298:	ed 0f       	add	r30, r29
 29a:	f1 1d       	adc	r31, r1
 29c:	8e e2       	ldi	r24, 0x2E	; 46
 29e:	80 83       	st	Z, r24
 2a0:	d0 e0       	ldi	r29, 0x00	; 0
 2a2:	58 01       	movw	r10, r16
 2a4:	ac 0e       	add	r10, r28
 2a6:	b1 1c       	adc	r11, r1
 2a8:	8a e0       	ldi	r24, 0x0A	; 10
 2aa:	28 2e       	mov	r2, r24
 2ac:	31 2c       	mov	r3, r1
 2ae:	41 2c       	mov	r4, r1
 2b0:	51 2c       	mov	r5, r1
 2b2:	1c 14       	cp	r1, r12
 2b4:	1d 04       	cpc	r1, r13
 2b6:	1e 04       	cpc	r1, r14
 2b8:	1f 04       	cpc	r1, r15
 2ba:	84 f4       	brge	.+32     	; 0x2dc <float_to_ascii+0x126>
 2bc:	45 01       	movw	r8, r10
 2be:	8d 0e       	add	r8, r29
 2c0:	91 1c       	adc	r9, r1
 2c2:	c7 01       	movw	r24, r14
 2c4:	b6 01       	movw	r22, r12
 2c6:	a2 01       	movw	r20, r4
 2c8:	91 01       	movw	r18, r2
 2ca:	0e 94 38 07 	call	0xe70	; 0xe70 <__divmodsi4>
 2ce:	60 5d       	subi	r22, 0xD0	; 208
 2d0:	f4 01       	movw	r30, r8
 2d2:	60 83       	st	Z, r22
 2d4:	69 01       	movw	r12, r18
 2d6:	7a 01       	movw	r14, r20
 2d8:	df 5f       	subi	r29, 0xFF	; 255
 2da:	eb cf       	rjmp	.-42     	; 0x2b2 <float_to_ascii+0xfc>
 2dc:	d1 11       	cpse	r29, r1
 2de:	06 c0       	rjmp	.+12     	; 0x2ec <float_to_ascii+0x136>
 2e0:	80 e3       	ldi	r24, 0x30	; 48
 2e2:	f8 01       	movw	r30, r16
 2e4:	ec 0f       	add	r30, r28
 2e6:	f1 1d       	adc	r31, r1
 2e8:	80 83       	st	Z, r24
 2ea:	d1 e0       	ldi	r29, 0x01	; 1
 2ec:	8d 2f       	mov	r24, r29
 2ee:	8c 0f       	add	r24, r28
 2f0:	77 20       	and	r7, r7
 2f2:	31 f0       	breq	.+12     	; 0x300 <float_to_ascii+0x14a>
 2f4:	f8 01       	movw	r30, r16
 2f6:	e8 0f       	add	r30, r24
 2f8:	f1 1d       	adc	r31, r1
 2fa:	9d e2       	ldi	r25, 0x2D	; 45
 2fc:	90 83       	st	Z, r25
 2fe:	8f 5f       	subi	r24, 0xFF	; 255
 300:	f8 01       	movw	r30, r16
 302:	e8 0f       	add	r30, r24
 304:	f1 1d       	adc	r31, r1
 306:	10 82       	st	Z, r1
 308:	81 50       	subi	r24, 0x01	; 1
 30a:	98 2f       	mov	r25, r24
 30c:	28 2f       	mov	r18, r24
 30e:	29 1b       	sub	r18, r25
 310:	29 17       	cp	r18, r25
 312:	60 f4       	brcc	.+24     	; 0x32c <float_to_ascii+0x176>
 314:	d8 01       	movw	r26, r16
 316:	a2 0f       	add	r26, r18
 318:	b1 1d       	adc	r27, r1
 31a:	2c 91       	ld	r18, X
 31c:	f8 01       	movw	r30, r16
 31e:	e9 0f       	add	r30, r25
 320:	f1 1d       	adc	r31, r1
 322:	30 81       	ld	r19, Z
 324:	3c 93       	st	X, r19
 326:	91 50       	subi	r25, 0x01	; 1
 328:	20 83       	st	Z, r18
 32a:	f0 cf       	rjmp	.-32     	; 0x30c <float_to_ascii+0x156>
 32c:	df 91       	pop	r29
 32e:	cf 91       	pop	r28
 330:	1f 91       	pop	r17
 332:	0f 91       	pop	r16
 334:	ff 90       	pop	r15
 336:	ef 90       	pop	r14
 338:	df 90       	pop	r13
 33a:	cf 90       	pop	r12
 33c:	bf 90       	pop	r11
 33e:	af 90       	pop	r10
 340:	9f 90       	pop	r9
 342:	8f 90       	pop	r8
 344:	7f 90       	pop	r7
 346:	5f 90       	pop	r5
 348:	4f 90       	pop	r4
 34a:	3f 90       	pop	r3
 34c:	2f 90       	pop	r2
 34e:	08 95       	ret

00000350 <combineDigits>:
 350:	cf 92       	push	r12
 352:	df 92       	push	r13
 354:	ef 92       	push	r14
 356:	ff 92       	push	r15
 358:	0f 93       	push	r16
 35a:	1f 93       	push	r17
 35c:	cf 93       	push	r28
 35e:	df 93       	push	r29
 360:	8c 01       	movw	r16, r24
 362:	ea 01       	movw	r28, r20
 364:	07 2e       	mov	r0, r23
 366:	00 0c       	add	r0, r0
 368:	88 0b       	sbc	r24, r24
 36a:	99 0b       	sbc	r25, r25
 36c:	0e 94 07 06 	call	0xc0e	; 0xc0e <__floatsisf>
 370:	20 e0       	ldi	r18, 0x00	; 0
 372:	30 e0       	ldi	r19, 0x00	; 0
 374:	40 e2       	ldi	r20, 0x20	; 32
 376:	51 e4       	ldi	r21, 0x41	; 65
 378:	0e 94 5d 05 	call	0xaba	; 0xaba <__divsf3>
 37c:	6b 01       	movw	r12, r22
 37e:	7c 01       	movw	r14, r24
 380:	b8 01       	movw	r22, r16
 382:	11 0f       	add	r17, r17
 384:	88 0b       	sbc	r24, r24
 386:	99 0b       	sbc	r25, r25
 388:	0e 94 07 06 	call	0xc0e	; 0xc0e <__floatsisf>
 38c:	9b 01       	movw	r18, r22
 38e:	ac 01       	movw	r20, r24
 390:	c7 01       	movw	r24, r14
 392:	b6 01       	movw	r22, r12
 394:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__addsf3>
 398:	6b 01       	movw	r12, r22
 39a:	7c 01       	movw	r14, r24
 39c:	be 01       	movw	r22, r28
 39e:	dd 0f       	add	r29, r29
 3a0:	88 0b       	sbc	r24, r24
 3a2:	99 0b       	sbc	r25, r25
 3a4:	0e 94 07 06 	call	0xc0e	; 0xc0e <__floatsisf>
 3a8:	20 e0       	ldi	r18, 0x00	; 0
 3aa:	30 e0       	ldi	r19, 0x00	; 0
 3ac:	48 ec       	ldi	r20, 0xC8	; 200
 3ae:	52 e4       	ldi	r21, 0x42	; 66
 3b0:	0e 94 5d 05 	call	0xaba	; 0xaba <__divsf3>
 3b4:	9b 01       	movw	r18, r22
 3b6:	ac 01       	movw	r20, r24
 3b8:	c7 01       	movw	r24, r14
 3ba:	b6 01       	movw	r22, r12
 3bc:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__addsf3>
 3c0:	df 91       	pop	r29
 3c2:	cf 91       	pop	r28
 3c4:	1f 91       	pop	r17
 3c6:	0f 91       	pop	r16
 3c8:	ff 90       	pop	r15
 3ca:	ef 90       	pop	r14
 3cc:	df 90       	pop	r13
 3ce:	cf 90       	pop	r12
 3d0:	08 95       	ret

000003d2 <read_UART>:

unsigned int read_UART(){
 3d2:	cf 93       	push	r28
 3d4:	df 93       	push	r29
	
	// uart_init( UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU) );
	unsigned int c = uart_getc();
 3d6:	0e 94 9d 04 	call	0x93a	; 0x93a <uart_getc>
 3da:	ec 01       	movw	r28, r24
	
	if ( c & UART_NO_DATA )
 3dc:	90 fd       	sbrc	r25, 0
 3de:	12 c0       	rjmp	.+36     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
        {
            /*
             * new data available from UART
             * check for Frame or Overrun error
             */
            if ( c & UART_FRAME_ERROR )
 3e0:	94 ff       	sbrs	r25, 4
 3e2:	04 c0       	rjmp	.+8      	; 0x3ec <read_UART+0x1a>
            {
                /* Framing Error detected, i.e no stop bit detected */
                uart_puts_P("UART Frame Error: ");
 3e4:	85 e9       	ldi	r24, 0x95	; 149
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <uart_puts_p>
            }
            if ( c & UART_OVERRUN_ERROR )
 3ec:	d3 ff       	sbrs	r29, 3
 3ee:	04 c0       	rjmp	.+8      	; 0x3f8 <read_UART+0x26>
                /* 
                 * Overrun, a character already present in the UART UDR register was 
                 * not read by the interrupt handler before the next character arrived,
                 * one or more received characters have been dropped
                 */
                uart_puts_P("UART Overrun Error: ");
 3f0:	80 e8       	ldi	r24, 0x80	; 128
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <uart_puts_p>
            }
            if ( c & UART_BUFFER_OVERFLOW )
 3f8:	d1 ff       	sbrs	r29, 1
 3fa:	04 c0       	rjmp	.+8      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
            {
                /* 
                 * We are not reading the receive buffer fast enough,
                 * one or more received character have been dropped 
                 */
                uart_puts_P("Buffer overflow error: ");
 3fc:	88 e6       	ldi	r24, 0x68	; 104
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <uart_puts_p>
        }
		
		return c;
	 
	
}
 404:	ce 01       	movw	r24, r28
 406:	df 91       	pop	r29
 408:	cf 91       	pop	r28
 40a:	08 95       	ret

0000040c <main>:


int main(void)
{
 40c:	cf 93       	push	r28
 40e:	df 93       	push	r29
 410:	cd b7       	in	r28, 0x3d	; 61
 412:	de b7       	in	r29, 0x3e	; 62
 414:	c4 55       	subi	r28, 0x54	; 84
 416:	d1 09       	sbc	r29, r1
 418:	0f b6       	in	r0, 0x3f	; 63
 41a:	f8 94       	cli
 41c:	de bf       	out	0x3e, r29	; 62
 41e:	0f be       	out	0x3f, r0	; 63
 420:	cd bf       	out	0x3d, r28	; 61
    unsigned int c;
	uint16_t ADC_value;
	
	uint8_t sinewave[64] = {128, 141, 153, 165, 177, 188, 199, 209, 219, 227, 234, 241, 246, 250, 254, 255, 255, 255, 254, 250, 246, 241, 234, 227, 219, 209, 199, 188, 177, 165, 153, 141, 128, 115, 103, 91, 79, 68, 57, 47, 37, 29, 22, 15, 10, 6, 2, 1, 0, 1, 2, 6, 10, 15, 22, 29, 37, 47, 57, 68, 79, 91, 103, 115};
 422:	80 e4       	ldi	r24, 0x40	; 64
 424:	e0 e0       	ldi	r30, 0x00	; 0
 426:	f1 e0       	ldi	r31, 0x01	; 1
 428:	de 01       	movw	r26, r28
 42a:	11 96       	adiw	r26, 0x01	; 1
 42c:	01 90       	ld	r0, Z+
 42e:	0d 92       	st	X+, r0
 430:	8a 95       	dec	r24
 432:	e1 f7       	brne	.-8      	; 0x42c <main+0x20>
	
    uart_init( UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU)); 
 434:	87 e6       	ldi	r24, 0x67	; 103
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	0e 94 84 04 	call	0x908	; 0x908 <uart_init>
    
    /*
     * now enable interrupt, since UART library is interrupt controlled
     */
    sei();
 43c:	78 94       	sei
	
	ADC_Init();
 43e:	0e 94 bf 00 	call	0x17e	; 0x17e <ADC_Init>
	i2c_init();
 442:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <i2c_init>
	
   
    uart_puts("Welcome to program.\n");
 446:	80 e4       	ldi	r24, 0x40	; 64
 448:	91 e0       	ldi	r25, 0x01	; 1
 44a:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <uart_puts>
	uart_puts("Please enter command:\n");
 44e:	85 e5       	ldi	r24, 0x55	; 85
 450:	91 e0       	ldi	r25, 0x01	; 1
 452:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <uart_puts>
			uart_putc(ones + 48);
			uart_putc('.');
			uart_putc(tenths + 48);
			uart_putc(hundredths + 48);
			uart_puts(" V (");
			itoa16(DAC_value, DAC_string);
 456:	7e 01       	movw	r14, r28
 458:	21 e4       	ldi	r18, 0x41	; 65
 45a:	e2 0e       	add	r14, r18
 45c:	f1 1c       	adc	r15, r1
    
   
    
    while(1){
		
		c = read_UART();
 45e:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <read_UART>
 462:	8c 01       	movw	r16, r24
		
		if(c & UART_NO_DATA){
 464:	90 fd       	sbrc	r25, 0
 466:	fb cf       	rjmp	.-10     	; 0x45e <main+0x52>
			continue;
		}
		
		if(c == 'G'){
 468:	87 34       	cpi	r24, 0x47	; 71
 46a:	91 05       	cpc	r25, r1
 46c:	49 f5       	brne	.+82     	; 0x4c0 <main+0xb4>
			// Single voltage mode.
			char digitString[20];
			ADC_value = ADC_Read();
 46e:	0e 94 cd 00 	call	0x19a	; 0x19a <ADC_Read>
			float voltage = convertToFloat(ADC_value);
			float_to_ascii(voltage, digitString);
 472:	bc 01       	movw	r22, r24
 474:	80 e0       	ldi	r24, 0x00	; 0
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	0e 94 05 06 	call	0xc0a	; 0xc0a <__floatunsisf>
 47c:	20 e0       	ldi	r18, 0x00	; 0
 47e:	30 e0       	ldi	r19, 0x00	; 0
 480:	40 e8       	ldi	r20, 0x80	; 128
 482:	5a e3       	ldi	r21, 0x3A	; 58
 484:	0e 94 b7 06 	call	0xd6e	; 0xd6e <__mulsf3>
 488:	20 e0       	ldi	r18, 0x00	; 0
 48a:	30 e0       	ldi	r19, 0x00	; 0
 48c:	40 ea       	ldi	r20, 0xA0	; 160
 48e:	50 e4       	ldi	r21, 0x40	; 64
 490:	0e 94 b7 06 	call	0xd6e	; 0xd6e <__mulsf3>
 494:	a7 01       	movw	r20, r14
 496:	0e 94 db 00 	call	0x1b6	; 0x1b6 <float_to_ascii>
			uart_puts("v=");
 49a:	8c e6       	ldi	r24, 0x6C	; 108
 49c:	91 e0       	ldi	r25, 0x01	; 1
 49e:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <uart_puts>
			uart_puts(digitString);
 4a2:	c7 01       	movw	r24, r14
 4a4:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <uart_puts>
			uart_puts(" V\n");
 4a8:	8f e6       	ldi	r24, 0x6F	; 111
 4aa:	91 e0       	ldi	r25, 0x01	; 1
 4ac:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <uart_puts>
			
			while(!(c & UART_NO_DATA)){
 4b0:	10 fd       	sbrc	r17, 0
 4b2:	d5 cf       	rjmp	.-86     	; 0x45e <main+0x52>
				c = read_UART(); // Read remaining characters until buffer is empty.
 4b4:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <read_UART>
 4b8:	8c 01       	movw	r16, r24
				uart_putc(c);
 4ba:	0e 94 bb 04 	call	0x976	; 0x976 <uart_putc>
 4be:	f8 cf       	rjmp	.-16     	; 0x4b0 <main+0xa4>
			}
			
		} else if (c == 'W'){
 4c0:	87 35       	cpi	r24, 0x57	; 87
 4c2:	91 05       	cpc	r25, r1
 4c4:	09 f0       	breq	.+2      	; 0x4c8 <main+0xbc>
 4c6:	a9 c0       	rjmp	.+338    	; 0x61a <main+0x20e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4c8:	8f e3       	ldi	r24, 0x3F	; 63
 4ca:	9c e9       	ldi	r25, 0x9C	; 156
 4cc:	01 97       	sbiw	r24, 0x01	; 1
 4ce:	f1 f7       	brne	.-4      	; 0x4cc <main+0xc0>
 4d0:	00 c0       	rjmp	.+0      	; 0x4d2 <main+0xc6>
 4d2:	00 00       	nop
			
			_delay_ms(10.0);
			c = read_UART();
 4d4:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <read_UART>
			
			if(c != ','){
 4d8:	8c 97       	sbiw	r24, 0x2c	; 44
 4da:	09 f0       	breq	.+2      	; 0x4de <main+0xd2>
 4dc:	c7 c0       	rjmp	.+398    	; 0x66c <main+0x260>
 4de:	ef e3       	ldi	r30, 0x3F	; 63
 4e0:	fc e9       	ldi	r31, 0x9C	; 156
 4e2:	31 97       	sbiw	r30, 0x01	; 1
 4e4:	f1 f7       	brne	.-4      	; 0x4e2 <main+0xd6>
 4e6:	00 c0       	rjmp	.+0      	; 0x4e8 <main+0xdc>
 4e8:	00 00       	nop
				uart_puts("Error. Command not recognized. Please try again.\n");
				continue;
			}
			
			_delay_ms(10.0);
			c = read_UART();
 4ea:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <read_UART>
			
			int DAC_channel;
			
			if(c == '0'){
 4ee:	80 33       	cpi	r24, 0x30	; 48
 4f0:	91 05       	cpc	r25, r1
 4f2:	31 f0       	breq	.+12     	; 0x500 <main+0xf4>
				DAC_channel = 0;
			} else if(c == '1'){
 4f4:	c1 97       	sbiw	r24, 0x31	; 49
 4f6:	09 f0       	breq	.+2      	; 0x4fa <main+0xee>
 4f8:	b9 c0       	rjmp	.+370    	; 0x66c <main+0x260>
				DAC_channel = 1;
 4fa:	01 e0       	ldi	r16, 0x01	; 1
 4fc:	10 e0       	ldi	r17, 0x00	; 0
 4fe:	02 c0       	rjmp	.+4      	; 0x504 <main+0xf8>
			c = read_UART();
			
			int DAC_channel;
			
			if(c == '0'){
				DAC_channel = 0;
 500:	00 e0       	ldi	r16, 0x00	; 0
 502:	10 e0       	ldi	r17, 0x00	; 0
 504:	8f e3       	ldi	r24, 0x3F	; 63
 506:	9c e9       	ldi	r25, 0x9C	; 156
 508:	01 97       	sbiw	r24, 0x01	; 1
 50a:	f1 f7       	brne	.-4      	; 0x508 <main+0xfc>
 50c:	00 c0       	rjmp	.+0      	; 0x50e <main+0x102>
 50e:	00 00       	nop
				uart_puts("Error. Command not recognized. Please try again.\n");
				continue;
			}
			
			_delay_ms(10.0);
			c = read_UART();
 510:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <read_UART>
			
			if(c != ','){ // Second comma
 514:	8c 97       	sbiw	r24, 0x2c	; 44
 516:	09 f0       	breq	.+2      	; 0x51a <main+0x10e>
 518:	a9 c0       	rjmp	.+338    	; 0x66c <main+0x260>
 51a:	ef e3       	ldi	r30, 0x3F	; 63
 51c:	fc e9       	ldi	r31, 0x9C	; 156
 51e:	31 97       	sbiw	r30, 0x01	; 1
 520:	f1 f7       	brne	.-4      	; 0x51e <main+0x112>
 522:	00 c0       	rjmp	.+0      	; 0x524 <main+0x118>
 524:	00 00       	nop
				uart_puts("Error. Command not recognized. Please try again.\n");
				continue;
			}
			
			_delay_ms(10.0);
			c = read_UART();
 526:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <read_UART>
			
			int DAC_freq;
			
			if(c == '1'){
 52a:	81 33       	cpi	r24, 0x31	; 49
 52c:	91 05       	cpc	r25, r1
 52e:	39 f0       	breq	.+14     	; 0x53e <main+0x132>
				DAC_freq = 1;
			} else if (c == '2'){
 530:	c2 97       	sbiw	r24, 0x32	; 50
 532:	09 f0       	breq	.+2      	; 0x536 <main+0x12a>
 534:	9b c0       	rjmp	.+310    	; 0x66c <main+0x260>
				DAC_freq = 2;
 536:	32 e0       	ldi	r19, 0x02	; 2
 538:	c3 2e       	mov	r12, r19
 53a:	d1 2c       	mov	r13, r1
 53c:	03 c0       	rjmp	.+6      	; 0x544 <main+0x138>
			c = read_UART();
			
			int DAC_freq;
			
			if(c == '1'){
				DAC_freq = 1;
 53e:	cc 24       	eor	r12, r12
 540:	c3 94       	inc	r12
 542:	d1 2c       	mov	r13, r1
 544:	8f e3       	ldi	r24, 0x3F	; 63
 546:	9c e9       	ldi	r25, 0x9C	; 156
 548:	01 97       	sbiw	r24, 0x01	; 1
 54a:	f1 f7       	brne	.-4      	; 0x548 <main+0x13c>
 54c:	00 c0       	rjmp	.+0      	; 0x54e <main+0x142>
 54e:	00 00       	nop
				uart_puts("Error. Command not recognized. Please try again.\n");
				continue;
			}
			
			_delay_ms(10.0);
			c = read_UART();
 550:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <read_UART>
			
			if(c != '0'){
 554:	c0 97       	sbiw	r24, 0x30	; 48
 556:	09 f0       	breq	.+2      	; 0x55a <main+0x14e>
 558:	89 c0       	rjmp	.+274    	; 0x66c <main+0x260>
 55a:	ef e3       	ldi	r30, 0x3F	; 63
 55c:	fc e9       	ldi	r31, 0x9C	; 156
 55e:	31 97       	sbiw	r30, 0x01	; 1
 560:	f1 f7       	brne	.-4      	; 0x55e <main+0x152>
 562:	00 c0       	rjmp	.+0      	; 0x564 <main+0x158>
 564:	00 00       	nop
				uart_puts("Error. Command not recognized. Please try again.\n");
				continue;
			}
			
			_delay_ms(10.0);
			c = read_UART();
 566:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <read_UART>
			
			if(c != ','){
 56a:	8c 97       	sbiw	r24, 0x2c	; 44
 56c:	09 f0       	breq	.+2      	; 0x570 <main+0x164>
 56e:	7e c0       	rjmp	.+252    	; 0x66c <main+0x260>
 570:	94 e6       	ldi	r25, 0x64	; 100
 572:	a9 2e       	mov	r10, r25
 574:	b1 2c       	mov	r11, r1
				continue;
			}
			
			
			
			if(DAC_channel == 0){
 576:	01 2b       	or	r16, r17
 578:	09 f0       	breq	.+2      	; 0x57c <main+0x170>
 57a:	46 c0       	rjmp	.+140    	; 0x608 <main+0x1fc>
 57c:	8e 01       	movw	r16, r28
 57e:	0f 5f       	subi	r16, 0xFF	; 255
 580:	1f 4f       	sbci	r17, 0xFF	; 255
				for(int j = 0; j < 100; ++j){
					for(int i = 0; i < 64; ++i){
						i2c_start(I2C_DEVICE+I2C_WRITE);
 582:	88 e5       	ldi	r24, 0x58	; 88
 584:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <i2c_start>
						i2c_write(0x00);
 588:	80 e0       	ldi	r24, 0x00	; 0
 58a:	0e 94 1b 04 	call	0x836	; 0x836 <i2c_write>
						i2c_write(sinewave[i]);
 58e:	f8 01       	movw	r30, r16
 590:	81 91       	ld	r24, Z+
 592:	8f 01       	movw	r16, r30
 594:	0e 94 1b 04 	call	0x836	; 0x836 <i2c_write>
						i2c_stop();
 598:	0e 94 13 04 	call	0x826	; 0x826 <i2c_stop>
						if(DAC_freq == 1){
 59c:	f1 e0       	ldi	r31, 0x01	; 1
 59e:	cf 16       	cp	r12, r31
 5a0:	d1 04       	cpc	r13, r1
 5a2:	29 f4       	brne	.+10     	; 0x5ae <main+0x1a2>
 5a4:	87 e8       	ldi	r24, 0x87	; 135
 5a6:	93 e1       	ldi	r25, 0x13	; 19
 5a8:	01 97       	sbiw	r24, 0x01	; 1
 5aa:	f1 f7       	brne	.-4      	; 0x5a8 <main+0x19c>
 5ac:	04 c0       	rjmp	.+8      	; 0x5b6 <main+0x1aa>
 5ae:	ef ec       	ldi	r30, 0xCF	; 207
 5b0:	f7 e0       	ldi	r31, 0x07	; 7
 5b2:	31 97       	sbiw	r30, 0x01	; 1
 5b4:	f1 f7       	brne	.-4      	; 0x5b2 <main+0x1a6>
 5b6:	00 c0       	rjmp	.+0      	; 0x5b8 <main+0x1ac>
 5b8:	00 00       	nop
			
			
			
			if(DAC_channel == 0){
				for(int j = 0; j < 100; ++j){
					for(int i = 0; i < 64; ++i){
 5ba:	e0 16       	cp	r14, r16
 5bc:	f1 06       	cpc	r15, r17
 5be:	09 f7       	brne	.-62     	; 0x582 <main+0x176>
 5c0:	f1 e0       	ldi	r31, 0x01	; 1
 5c2:	af 1a       	sub	r10, r31
 5c4:	b1 08       	sbc	r11, r1
			}
			
			
			
			if(DAC_channel == 0){
				for(int j = 0; j < 100; ++j){
 5c6:	d1 f6       	brne	.-76     	; 0x57c <main+0x170>
 5c8:	4a cf       	rjmp	.-364    	; 0x45e <main+0x52>
					}
				}
			} else {
				for(int j = 0; j < 100; ++j){
					for(int i = 0; i < 64; ++i){
						i2c_start(I2C_DEVICE+I2C_WRITE);
 5ca:	88 e5       	ldi	r24, 0x58	; 88
 5cc:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <i2c_start>
						i2c_write(0x01);
 5d0:	81 e0       	ldi	r24, 0x01	; 1
 5d2:	0e 94 1b 04 	call	0x836	; 0x836 <i2c_write>
						i2c_write(sinewave[i]);
 5d6:	f8 01       	movw	r30, r16
 5d8:	81 91       	ld	r24, Z+
 5da:	8f 01       	movw	r16, r30
 5dc:	0e 94 1b 04 	call	0x836	; 0x836 <i2c_write>
						i2c_stop();
 5e0:	0e 94 13 04 	call	0x826	; 0x826 <i2c_stop>
						if(DAC_freq == 1){
 5e4:	f1 e0       	ldi	r31, 0x01	; 1
 5e6:	cf 16       	cp	r12, r31
 5e8:	d1 04       	cpc	r13, r1
 5ea:	91 f4       	brne	.+36     	; 0x610 <main+0x204>
 5ec:	87 e8       	ldi	r24, 0x87	; 135
 5ee:	93 e1       	ldi	r25, 0x13	; 19
 5f0:	01 97       	sbiw	r24, 0x01	; 1
 5f2:	f1 f7       	brne	.-4      	; 0x5f0 <main+0x1e4>
 5f4:	00 c0       	rjmp	.+0      	; 0x5f6 <main+0x1ea>
 5f6:	00 00       	nop
						}
					}
				}
			} else {
				for(int j = 0; j < 100; ++j){
					for(int i = 0; i < 64; ++i){
 5f8:	e0 16       	cp	r14, r16
 5fa:	f1 06       	cpc	r15, r17
 5fc:	31 f7       	brne	.-52     	; 0x5ca <main+0x1be>
 5fe:	f1 e0       	ldi	r31, 0x01	; 1
 600:	af 1a       	sub	r10, r31
 602:	b1 08       	sbc	r11, r1
							_delay_ms(0.5);
						}
					}
				}
			} else {
				for(int j = 0; j < 100; ++j){
 604:	09 f4       	brne	.+2      	; 0x608 <main+0x1fc>
 606:	2b cf       	rjmp	.-426    	; 0x45e <main+0x52>
 608:	8e 01       	movw	r16, r28
 60a:	0f 5f       	subi	r16, 0xFF	; 255
 60c:	1f 4f       	sbci	r17, 0xFF	; 255
 60e:	dd cf       	rjmp	.-70     	; 0x5ca <main+0x1be>
 610:	ef ec       	ldi	r30, 0xCF	; 207
 612:	f7 e0       	ldi	r31, 0x07	; 7
 614:	31 97       	sbiw	r30, 0x01	; 1
 616:	f1 f7       	brne	.-4      	; 0x614 <main+0x208>
 618:	ed cf       	rjmp	.-38     	; 0x5f4 <main+0x1e8>
			}
			
			
			
			
		} else if (c == 'T'){
 61a:	84 35       	cpi	r24, 0x54	; 84
 61c:	91 05       	cpc	r25, r1
 61e:	c1 f4       	brne	.+48     	; 0x650 <main+0x244>
 620:	8f e3       	ldi	r24, 0x3F	; 63
 622:	9c e9       	ldi	r25, 0x9C	; 156
 624:	01 97       	sbiw	r24, 0x01	; 1
 626:	f1 f7       	brne	.-4      	; 0x624 <main+0x218>
 628:	00 c0       	rjmp	.+0      	; 0x62a <main+0x21e>
 62a:	00 00       	nop
			
			_delay_ms(10.0);
			
			c = read_UART();
 62c:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <read_UART>
			
			if(c & UART_NO_DATA){
 630:	90 ff       	sbrs	r25, 0
 632:	05 c0       	rjmp	.+10     	; 0x63e <main+0x232>
				uart_puts("No data!\n");
 634:	85 ea       	ldi	r24, 0xA5	; 165
 636:	91 e0       	ldi	r25, 0x01	; 1
 638:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <uart_puts>
 63c:	06 c0       	rjmp	.+12     	; 0x64a <main+0x23e>
			}
			
			if (c == 'c'){
 63e:	83 36       	cpi	r24, 0x63	; 99
 640:	91 05       	cpc	r25, r1
 642:	19 f4       	brne	.+6      	; 0x64a <main+0x23e>
				uart_puts("Success!\n");
 644:	8f ea       	ldi	r24, 0xAF	; 175
 646:	91 e0       	ldi	r25, 0x01	; 1
 648:	c3 c0       	rjmp	.+390    	; 0x7d0 <main+0x3c4>
			} else{
				uart_puts("Failure.\n");
 64a:	89 eb       	ldi	r24, 0xB9	; 185
 64c:	91 e0       	ldi	r25, 0x01	; 1
 64e:	c0 c0       	rjmp	.+384    	; 0x7d0 <main+0x3c4>
			}
			
		}
		else if (c == 'S'){
 650:	83 35       	cpi	r24, 0x53	; 83
 652:	91 05       	cpc	r25, r1
 654:	09 f0       	breq	.+2      	; 0x658 <main+0x24c>
 656:	03 cf       	rjmp	.-506    	; 0x45e <main+0x52>
 658:	ef e3       	ldi	r30, 0x3F	; 63
 65a:	fc e9       	ldi	r31, 0x9C	; 156
 65c:	31 97       	sbiw	r30, 0x01	; 1
 65e:	f1 f7       	brne	.-4      	; 0x65c <main+0x250>
 660:	00 c0       	rjmp	.+0      	; 0x662 <main+0x256>
 662:	00 00       	nop
			// Set DAC output voltage
			
			_delay_ms(10.0);
			c = read_UART();
 664:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <read_UART>
			
			if(c != ','){
 668:	8c 97       	sbiw	r24, 0x2c	; 44
 66a:	19 f0       	breq	.+6      	; 0x672 <main+0x266>
				uart_puts("Error. Command not recognized. Please try again.\n");
 66c:	83 e7       	ldi	r24, 0x73	; 115
 66e:	91 e0       	ldi	r25, 0x01	; 1
 670:	af c0       	rjmp	.+350    	; 0x7d0 <main+0x3c4>
 672:	8f e3       	ldi	r24, 0x3F	; 63
 674:	9c e9       	ldi	r25, 0x9C	; 156
 676:	01 97       	sbiw	r24, 0x01	; 1
 678:	f1 f7       	brne	.-4      	; 0x676 <main+0x26a>
 67a:	00 c0       	rjmp	.+0      	; 0x67c <main+0x270>
 67c:	00 00       	nop
			}
			
			int DAC_Channel;
			
			_delay_ms(10.0);
			c = read_UART();
 67e:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <read_UART>
			
			if(c == '0'){
 682:	80 33       	cpi	r24, 0x30	; 48
 684:	91 05       	cpc	r25, r1
 686:	31 f0       	breq	.+12     	; 0x694 <main+0x288>
				DAC_Channel = 0;
				} else if (c == '1'){
 688:	c1 97       	sbiw	r24, 0x31	; 49
 68a:	81 f7       	brne	.-32     	; 0x66c <main+0x260>
				DAC_Channel = 1;
 68c:	66 24       	eor	r6, r6
 68e:	63 94       	inc	r6
 690:	71 2c       	mov	r7, r1
 692:	02 c0       	rjmp	.+4      	; 0x698 <main+0x28c>
			
			_delay_ms(10.0);
			c = read_UART();
			
			if(c == '0'){
				DAC_Channel = 0;
 694:	61 2c       	mov	r6, r1
 696:	71 2c       	mov	r7, r1
 698:	ef e3       	ldi	r30, 0x3F	; 63
 69a:	fc e9       	ldi	r31, 0x9C	; 156
 69c:	31 97       	sbiw	r30, 0x01	; 1
 69e:	f1 f7       	brne	.-4      	; 0x69c <main+0x290>
 6a0:	00 c0       	rjmp	.+0      	; 0x6a2 <main+0x296>
 6a2:	00 00       	nop
			}
			
			int ones, tenths, hundredths;
			
			_delay_ms(10.0);
			c = read_UART(); // Expecting second comma
 6a4:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <read_UART>
			
			if(c != ','){
 6a8:	8c 97       	sbiw	r24, 0x2c	; 44
 6aa:	01 f7       	brne	.-64     	; 0x66c <main+0x260>
 6ac:	8f e3       	ldi	r24, 0x3F	; 63
 6ae:	9c e9       	ldi	r25, 0x9C	; 156
 6b0:	01 97       	sbiw	r24, 0x01	; 1
 6b2:	f1 f7       	brne	.-4      	; 0x6b0 <main+0x2a4>
 6b4:	00 c0       	rjmp	.+0      	; 0x6b6 <main+0x2aa>
 6b6:	00 00       	nop
				uart_puts("Error. Command not recognized. Please try again.\n");
				continue;
			}
			
			_delay_ms(10.0);
			c = read_UART(); // Get first digit.
 6b8:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <read_UART>
			
			if(!(c >= 48 && c <= 57)){ // c is not a digit
 6bc:	c0 97       	sbiw	r24, 0x30	; 48
 6be:	4c 01       	movw	r8, r24
 6c0:	9a e0       	ldi	r25, 0x0A	; 10
 6c2:	89 16       	cp	r8, r25
 6c4:	91 04       	cpc	r9, r1
 6c6:	90 f6       	brcc	.-92     	; 0x66c <main+0x260>
 6c8:	ef e3       	ldi	r30, 0x3F	; 63
 6ca:	fc e9       	ldi	r31, 0x9C	; 156
 6cc:	31 97       	sbiw	r30, 0x01	; 1
 6ce:	f1 f7       	brne	.-4      	; 0x6cc <main+0x2c0>
 6d0:	00 c0       	rjmp	.+0      	; 0x6d2 <main+0x2c6>
 6d2:	00 00       	nop
			}

			ones = c - 48; // Convert ASCII to digit.
			
			_delay_ms(10.0);
			c = read_UART(); // Expecting .
 6d4:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <read_UART>
			
			if(c != '.'){
 6d8:	8e 97       	sbiw	r24, 0x2e	; 46
 6da:	41 f6       	brne	.-112    	; 0x66c <main+0x260>
 6dc:	8f e3       	ldi	r24, 0x3F	; 63
 6de:	9c e9       	ldi	r25, 0x9C	; 156
 6e0:	01 97       	sbiw	r24, 0x01	; 1
 6e2:	f1 f7       	brne	.-4      	; 0x6e0 <main+0x2d4>
 6e4:	00 c0       	rjmp	.+0      	; 0x6e6 <main+0x2da>
 6e6:	00 00       	nop
				continue;
			}
			
			
			_delay_ms(10.0);
			c = read_UART(); // Expecting tenths.
 6e8:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <read_UART>
			
			if(!(c >= 48 && c <= 57)){ // c is not a digit
 6ec:	c0 97       	sbiw	r24, 0x30	; 48
 6ee:	5c 01       	movw	r10, r24
 6f0:	9a e0       	ldi	r25, 0x0A	; 10
 6f2:	a9 16       	cp	r10, r25
 6f4:	b1 04       	cpc	r11, r1
 6f6:	08 f0       	brcs	.+2      	; 0x6fa <main+0x2ee>
 6f8:	b9 cf       	rjmp	.-142    	; 0x66c <main+0x260>
 6fa:	ef e3       	ldi	r30, 0x3F	; 63
 6fc:	fc e9       	ldi	r31, 0x9C	; 156
 6fe:	31 97       	sbiw	r30, 0x01	; 1
 700:	f1 f7       	brne	.-4      	; 0x6fe <main+0x2f2>
 702:	00 c0       	rjmp	.+0      	; 0x704 <main+0x2f8>
 704:	00 00       	nop
			}
			
			tenths = c - 48;
			
			_delay_ms(10.0);
			c = read_UART();
 706:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <read_UART>
			
			if(!(c >= 48 && c <= 57)){ // c is not a digit
 70a:	6c 01       	movw	r12, r24
 70c:	f0 e3       	ldi	r31, 0x30	; 48
 70e:	cf 1a       	sub	r12, r31
 710:	d1 08       	sbc	r13, r1
 712:	2a e0       	ldi	r18, 0x0A	; 10
 714:	c2 16       	cp	r12, r18
 716:	d1 04       	cpc	r13, r1
 718:	08 f0       	brcs	.+2      	; 0x71c <main+0x310>
 71a:	a8 cf       	rjmp	.-176    	; 0x66c <main+0x260>
			}
			
			hundredths = c - 48;
			
			// Empty remaining UART buffer
			while(!(c & UART_NO_DATA)){
 71c:	90 fd       	sbrc	r25, 0
 71e:	09 c0       	rjmp	.+18     	; 0x732 <main+0x326>
 720:	8f e3       	ldi	r24, 0x3F	; 63
 722:	9c e9       	ldi	r25, 0x9C	; 156
 724:	01 97       	sbiw	r24, 0x01	; 1
 726:	f1 f7       	brne	.-4      	; 0x724 <main+0x318>
 728:	00 c0       	rjmp	.+0      	; 0x72a <main+0x31e>
 72a:	00 00       	nop
				_delay_ms(10.0);
				c = read_UART();
 72c:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <read_UART>
 730:	f5 cf       	rjmp	.-22     	; 0x71c <main+0x310>
			}
			
			float valueToConvert = combineDigits(ones, tenths, hundredths);
 732:	a6 01       	movw	r20, r12
 734:	b5 01       	movw	r22, r10
 736:	c4 01       	movw	r24, r8
 738:	0e 94 a8 01 	call	0x350	; 0x350 <combineDigits>
float combineDigits(int ones, int tenths, int hundredths){
	return ones + (((float) tenths)/10.0) + (((float) hundredths)/100.0);
}

unsigned char convertFloatToChar(float input){
	return (input / 5.0) * 255;
 73c:	20 e0       	ldi	r18, 0x00	; 0
 73e:	30 e0       	ldi	r19, 0x00	; 0
 740:	40 ea       	ldi	r20, 0xA0	; 160
 742:	50 e4       	ldi	r21, 0x40	; 64
 744:	0e 94 5d 05 	call	0xaba	; 0xaba <__divsf3>
 748:	20 e0       	ldi	r18, 0x00	; 0
 74a:	30 e0       	ldi	r19, 0x00	; 0
 74c:	4f e7       	ldi	r20, 0x7F	; 127
 74e:	53 e4       	ldi	r21, 0x43	; 67
 750:	0e 94 b7 06 	call	0xd6e	; 0xd6e <__mulsf3>
 754:	0e 94 d6 05 	call	0xbac	; 0xbac <__fixunssfsi>
 758:	16 2f       	mov	r17, r22
			
			unsigned char DAC_value = convertFloatToChar(valueToConvert);
			
			if(DAC_Channel == 0){
				
				i2c_start(I2C_DEVICE+I2C_WRITE);
 75a:	88 e5       	ldi	r24, 0x58	; 88
			
			float valueToConvert = combineDigits(ones, tenths, hundredths);
			
			unsigned char DAC_value = convertFloatToChar(valueToConvert);
			
			if(DAC_Channel == 0){
 75c:	61 14       	cp	r6, r1
 75e:	71 04       	cpc	r7, r1
 760:	21 f4       	brne	.+8      	; 0x76a <main+0x35e>
				
				i2c_start(I2C_DEVICE+I2C_WRITE);
 762:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <i2c_start>
				i2c_write(0x00);
 766:	80 e0       	ldi	r24, 0x00	; 0
 768:	03 c0       	rjmp	.+6      	; 0x770 <main+0x364>
				i2c_write(DAC_value);
				i2c_stop();
				
			}
			else{
				i2c_start(I2C_DEVICE+I2C_WRITE);
 76a:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <i2c_start>
				i2c_write(0x01);
 76e:	81 e0       	ldi	r24, 0x01	; 1
 770:	0e 94 1b 04 	call	0x836	; 0x836 <i2c_write>
				i2c_write(DAC_value);
 774:	81 2f       	mov	r24, r17
 776:	0e 94 1b 04 	call	0x836	; 0x836 <i2c_write>
				i2c_stop();
 77a:	0e 94 13 04 	call	0x826	; 0x826 <i2c_stop>
			}
			
			char DAC_string[5];
			
			uart_puts("DAC channel ");
 77e:	83 ec       	ldi	r24, 0xC3	; 195
 780:	91 e0       	ldi	r25, 0x01	; 1
 782:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <uart_puts>
			uart_putc(DAC_Channel + 48);
 786:	80 e3       	ldi	r24, 0x30	; 48
 788:	86 0d       	add	r24, r6
 78a:	0e 94 bb 04 	call	0x976	; 0x976 <uart_putc>
			uart_puts(" set to ");
 78e:	80 ed       	ldi	r24, 0xD0	; 208
 790:	91 e0       	ldi	r25, 0x01	; 1
 792:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <uart_puts>
			uart_putc(ones + 48);
 796:	80 e3       	ldi	r24, 0x30	; 48
 798:	88 0d       	add	r24, r8
 79a:	0e 94 bb 04 	call	0x976	; 0x976 <uart_putc>
			uart_putc('.');
 79e:	8e e2       	ldi	r24, 0x2E	; 46
 7a0:	0e 94 bb 04 	call	0x976	; 0x976 <uart_putc>
			uart_putc(tenths + 48);
 7a4:	80 e3       	ldi	r24, 0x30	; 48
 7a6:	8a 0d       	add	r24, r10
 7a8:	0e 94 bb 04 	call	0x976	; 0x976 <uart_putc>
			uart_putc(hundredths + 48);
 7ac:	80 e3       	ldi	r24, 0x30	; 48
 7ae:	8c 0d       	add	r24, r12
 7b0:	0e 94 bb 04 	call	0x976	; 0x976 <uart_putc>
			uart_puts(" V (");
 7b4:	89 ed       	ldi	r24, 0xD9	; 217
 7b6:	91 e0       	ldi	r25, 0x01	; 1
 7b8:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <uart_puts>
			itoa16(DAC_value, DAC_string);
 7bc:	b7 01       	movw	r22, r14
 7be:	81 2f       	mov	r24, r17
 7c0:	90 e0       	ldi	r25, 0x00	; 0
 7c2:	0e 94 73 00 	call	0xe6	; 0xe6 <itoa16>
			uart_puts(DAC_string);
 7c6:	c7 01       	movw	r24, r14
 7c8:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <uart_puts>
			uart_puts("d)\n");
 7cc:	8e ed       	ldi	r24, 0xDE	; 222
 7ce:	91 e0       	ldi	r25, 0x01	; 1
 7d0:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <uart_puts>
 7d4:	44 ce       	rjmp	.-888    	; 0x45e <main+0x52>

000007d6 <i2c_init>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
 7d6:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 7da:	88 e4       	ldi	r24, 0x48	; 72
 7dc:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 7e0:	08 95       	ret

000007e2 <i2c_start>:
 7e2:	94 ea       	ldi	r25, 0xA4	; 164
 7e4:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 7e8:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 7ec:	97 ff       	sbrs	r25, 7
 7ee:	fc cf       	rjmp	.-8      	; 0x7e8 <i2c_start+0x6>
 7f0:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 7f4:	98 7f       	andi	r25, 0xF8	; 248
 7f6:	98 30       	cpi	r25, 0x08	; 8
 7f8:	21 f0       	breq	.+8      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7fa:	90 31       	cpi	r25, 0x10	; 16
 7fc:	11 f0       	breq	.+4      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7fe:	81 e0       	ldi	r24, 0x01	; 1
 800:	08 95       	ret
 802:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 806:	84 e8       	ldi	r24, 0x84	; 132
 808:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 80c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 810:	87 ff       	sbrs	r24, 7
 812:	fc cf       	rjmp	.-8      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 814:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 818:	88 7f       	andi	r24, 0xF8	; 248
 81a:	88 31       	cpi	r24, 0x18	; 24
 81c:	11 f0       	breq	.+4      	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 81e:	80 34       	cpi	r24, 0x40	; 64
 820:	71 f7       	brne	.-36     	; 0x7fe <i2c_start+0x1c>
 822:	80 e0       	ldi	r24, 0x00	; 0
 824:	08 95       	ret

00000826 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 826:	84 e9       	ldi	r24, 0x94	; 148
 828:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
 82c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 830:	84 fd       	sbrc	r24, 4
 832:	fc cf       	rjmp	.-8      	; 0x82c <i2c_stop+0x6>

}/* i2c_stop */
 834:	08 95       	ret

00000836 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
 836:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
 83a:	84 e8       	ldi	r24, 0x84	; 132
 83c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 840:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 844:	87 ff       	sbrs	r24, 7
 846:	fc cf       	rjmp	.-8      	; 0x840 <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
 848:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 84c:	98 7f       	andi	r25, 0xF8	; 248
 84e:	81 e0       	ldi	r24, 0x01	; 1
 850:	98 32       	cpi	r25, 0x28	; 40
 852:	09 f4       	brne	.+2      	; 0x856 <i2c_write+0x20>
 854:	80 e0       	ldi	r24, 0x00	; 0
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
 856:	08 95       	ret

00000858 <__vector_18>:
ISR (UART0_RECEIVE_INTERRUPT)	
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
 858:	1f 92       	push	r1
 85a:	0f 92       	push	r0
 85c:	0f b6       	in	r0, 0x3f	; 63
 85e:	0f 92       	push	r0
 860:	11 24       	eor	r1, r1
 862:	2f 93       	push	r18
 864:	8f 93       	push	r24
 866:	9f 93       	push	r25
 868:	ef 93       	push	r30
 86a:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */
    usr  = UART0_STATUS;
 86c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    data = UART0_DATA;
 870:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    
    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
#if defined(FE) && defined(DOR) && defined(UPE)
    lastRxError = usr & (_BV(FE)|_BV(DOR)|_BV(UPE) );
#elif defined(FE0) && defined(DOR0) && defined(UPE0)
    lastRxError = usr & (_BV(FE0)|_BV(DOR0)|_BV(UPE0) );
 874:	8c 71       	andi	r24, 0x1C	; 28
#elif defined(FE) && defined(DOR)
    lastRxError = usr & (_BV(FE)|_BV(DOR) );
#endif

    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
 876:	e0 91 e4 01 	lds	r30, 0x01E4	; 0x8001e4 <UART_RxHead>
 87a:	ef 5f       	subi	r30, 0xFF	; 255
 87c:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART_RxTail ) {
 87e:	20 91 e3 01 	lds	r18, 0x01E3	; 0x8001e3 <UART_RxTail>
 882:	e2 17       	cp	r30, r18
 884:	39 f0       	breq	.+14     	; 0x894 <__vector_18+0x3c>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
 886:	e0 93 e4 01 	sts	0x01E4, r30	; 0x8001e4 <UART_RxHead>
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
 88a:	f0 e0       	ldi	r31, 0x00	; 0
 88c:	e9 51       	subi	r30, 0x19	; 25
 88e:	fe 4f       	sbci	r31, 0xFE	; 254
 890:	90 83       	st	Z, r25
 892:	01 c0       	rjmp	.+2      	; 0x896 <__vector_18+0x3e>
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 894:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;   
 896:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <__data_end>
 89a:	89 2b       	or	r24, r25
 89c:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <__data_end>
}
 8a0:	ff 91       	pop	r31
 8a2:	ef 91       	pop	r30
 8a4:	9f 91       	pop	r25
 8a6:	8f 91       	pop	r24
 8a8:	2f 91       	pop	r18
 8aa:	0f 90       	pop	r0
 8ac:	0f be       	out	0x3f, r0	; 63
 8ae:	0f 90       	pop	r0
 8b0:	1f 90       	pop	r1
 8b2:	18 95       	reti

000008b4 <__vector_19>:
ISR (UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
 8b4:	1f 92       	push	r1
 8b6:	0f 92       	push	r0
 8b8:	0f b6       	in	r0, 0x3f	; 63
 8ba:	0f 92       	push	r0
 8bc:	11 24       	eor	r1, r1
 8be:	8f 93       	push	r24
 8c0:	9f 93       	push	r25
 8c2:	ef 93       	push	r30
 8c4:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
 8c6:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <UART_TxHead>
 8ca:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <UART_TxTail>
 8ce:	98 17       	cp	r25, r24
 8d0:	69 f0       	breq	.+26     	; 0x8ec <__vector_19+0x38>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 8d2:	e0 91 e5 01 	lds	r30, 0x01E5	; 0x8001e5 <UART_TxTail>
 8d6:	ef 5f       	subi	r30, 0xFF	; 255
 8d8:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
 8da:	e0 93 e5 01 	sts	0x01E5, r30	; 0x8001e5 <UART_TxTail>
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
 8de:	f0 e0       	ldi	r31, 0x00	; 0
 8e0:	e9 5f       	subi	r30, 0xF9	; 249
 8e2:	fd 4f       	sbci	r31, 0xFD	; 253
 8e4:	80 81       	ld	r24, Z
 8e6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 8ea:	05 c0       	rjmp	.+10     	; 0x8f6 <__vector_19+0x42>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 8ec:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 8f0:	8f 7d       	andi	r24, 0xDF	; 223
 8f2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    }
}
 8f6:	ff 91       	pop	r31
 8f8:	ef 91       	pop	r30
 8fa:	9f 91       	pop	r25
 8fc:	8f 91       	pop	r24
 8fe:	0f 90       	pop	r0
 900:	0f be       	out	0x3f, r0	; 63
 902:	0f 90       	pop	r0
 904:	1f 90       	pop	r1
 906:	18 95       	reti

00000908 <uart_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
 908:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <UART_TxHead>
    UART_TxTail = 0;
 90c:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <UART_TxTail>
    UART_RxHead = 0;
 910:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <UART_RxHead>
    UART_RxTail = 0;
 914:	10 92 e3 01 	sts	0x01E3, r1	; 0x8001e3 <UART_RxTail>
#endif
#endif
#endif

    /* Set baud rate */
    if ( baudrate & 0x8000 )
 918:	97 ff       	sbrs	r25, 7
 91a:	03 c0       	rjmp	.+6      	; 0x922 <uart_init+0x1a>
    {
        #if UART0_BIT_U2X
        UART0_STATUS = (1<<UART0_BIT_U2X);  //Enable 2x speed 
 91c:	22 e0       	ldi	r18, 0x02	; 2
 91e:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
        #endif
    } 
    #if defined(UART0_UBRRH)
    UART0_UBRRH = (unsigned char)((baudrate>>8)&0x80) ;
 922:	90 78       	andi	r25, 0x80	; 128
 924:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    #endif    
    UART0_UBRRL = (unsigned char) (baudrate&0x00FF);
 928:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
      
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(UART0_BIT_RXCIE)|(1<<UART0_BIT_RXEN)|(1<<UART0_BIT_TXEN);
 92c:	88 e9       	ldi	r24, 0x98	; 152
 92e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef UART0_CONTROLC
    #ifdef UART0_BIT_URSEL
    UART0_CONTROLC = (1<<UART0_BIT_URSEL)|(1<<UART0_BIT_UCSZ1)|(1<<UART0_BIT_UCSZ0);
    #else
    UART0_CONTROLC = (1<<UART0_BIT_UCSZ1)|(1<<UART0_BIT_UCSZ0);
 932:	86 e0       	ldi	r24, 0x06	; 6
 934:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 938:	08 95       	ret

0000093a <uart_getc>:
    unsigned char tmptail;
    unsigned char data;
    unsigned char lastRxError;


    if ( UART_RxHead == UART_RxTail ) {
 93a:	90 91 e4 01 	lds	r25, 0x01E4	; 0x8001e4 <UART_RxHead>
 93e:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <UART_RxTail>
 942:	98 17       	cp	r25, r24
 944:	a9 f0       	breq	.+42     	; 0x970 <uart_getc+0x36>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
 946:	90 91 e3 01 	lds	r25, 0x01E3	; 0x8001e3 <UART_RxTail>
 94a:	9f 5f       	subi	r25, 0xFF	; 255
 94c:	9f 71       	andi	r25, 0x1F	; 31
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
 94e:	e9 2f       	mov	r30, r25
 950:	f0 e0       	ldi	r31, 0x00	; 0
 952:	e9 51       	subi	r30, 0x19	; 25
 954:	fe 4f       	sbci	r31, 0xFE	; 254
 956:	20 81       	ld	r18, Z
    lastRxError = UART_LastRxError;
 958:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <__data_end>
    
    /* store buffer index */
    UART_RxTail = tmptail; 
 95c:	90 93 e3 01 	sts	0x01E3, r25	; 0x8001e3 <UART_RxTail>
    
    UART_LastRxError = 0;
 960:	10 92 e2 01 	sts	0x01E2, r1	; 0x8001e2 <__data_end>
    return (lastRxError << 8) + data;
 964:	90 e0       	ldi	r25, 0x00	; 0
 966:	98 2f       	mov	r25, r24
 968:	88 27       	eor	r24, r24
 96a:	82 0f       	add	r24, r18
 96c:	91 1d       	adc	r25, r1
 96e:	08 95       	ret
    unsigned char data;
    unsigned char lastRxError;


    if ( UART_RxHead == UART_RxTail ) {
        return UART_NO_DATA;   /* no data available */
 970:	80 e0       	ldi	r24, 0x00	; 0
 972:	91 e0       	ldi	r25, 0x01	; 1
    UART_RxTail = tmptail; 
    
    UART_LastRxError = 0;
    return (lastRxError << 8) + data;

}/* uart_getc */
 974:	08 95       	ret

00000976 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 976:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <UART_TxHead>
 97a:	9f 5f       	subi	r25, 0xFF	; 255
 97c:	9f 71       	andi	r25, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
 97e:	20 91 e5 01 	lds	r18, 0x01E5	; 0x8001e5 <UART_TxTail>
 982:	92 17       	cp	r25, r18
 984:	e1 f3       	breq	.-8      	; 0x97e <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
 986:	e9 2f       	mov	r30, r25
 988:	f0 e0       	ldi	r31, 0x00	; 0
 98a:	e9 5f       	subi	r30, 0xF9	; 249
 98c:	fd 4f       	sbci	r31, 0xFD	; 253
 98e:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
 990:	90 93 e6 01 	sts	0x01E6, r25	; 0x8001e6 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
 994:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 998:	80 62       	ori	r24, 0x20	; 32
 99a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 99e:	08 95       	ret

000009a0 <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
 9a0:	cf 93       	push	r28
 9a2:	df 93       	push	r29
 9a4:	ec 01       	movw	r28, r24
    while (*s) 
 9a6:	89 91       	ld	r24, Y+
 9a8:	88 23       	and	r24, r24
 9aa:	19 f0       	breq	.+6      	; 0x9b2 <uart_puts+0x12>
      uart_putc(*s++);
 9ac:	0e 94 bb 04 	call	0x976	; 0x976 <uart_putc>
 9b0:	fa cf       	rjmp	.-12     	; 0x9a6 <uart_puts+0x6>

}/* uart_puts */
 9b2:	df 91       	pop	r29
 9b4:	cf 91       	pop	r28
 9b6:	08 95       	ret

000009b8 <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
 9b8:	cf 93       	push	r28
 9ba:	df 93       	push	r29
 9bc:	fc 01       	movw	r30, r24
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
 9be:	84 91       	lpm	r24, Z
 9c0:	ef 01       	movw	r28, r30
 9c2:	21 96       	adiw	r28, 0x01	; 1
 9c4:	88 23       	and	r24, r24
 9c6:	21 f0       	breq	.+8      	; 0x9d0 <uart_puts_p+0x18>
      uart_putc(c);
 9c8:	0e 94 bb 04 	call	0x976	; 0x976 <uart_putc>
 9cc:	fe 01       	movw	r30, r28
 9ce:	f7 cf       	rjmp	.-18     	; 0x9be <uart_puts_p+0x6>

}/* uart_puts_p */
 9d0:	df 91       	pop	r29
 9d2:	cf 91       	pop	r28
 9d4:	08 95       	ret

000009d6 <__subsf3>:
 9d6:	50 58       	subi	r21, 0x80	; 128

000009d8 <__addsf3>:
 9d8:	bb 27       	eor	r27, r27
 9da:	aa 27       	eor	r26, r26
 9dc:	0e 94 03 05 	call	0xa06	; 0xa06 <__addsf3x>
 9e0:	0c 94 7d 06 	jmp	0xcfa	; 0xcfa <__fp_round>
 9e4:	0e 94 6f 06 	call	0xcde	; 0xcde <__fp_pscA>
 9e8:	38 f0       	brcs	.+14     	; 0x9f8 <__addsf3+0x20>
 9ea:	0e 94 76 06 	call	0xcec	; 0xcec <__fp_pscB>
 9ee:	20 f0       	brcs	.+8      	; 0x9f8 <__addsf3+0x20>
 9f0:	39 f4       	brne	.+14     	; 0xa00 <__addsf3+0x28>
 9f2:	9f 3f       	cpi	r25, 0xFF	; 255
 9f4:	19 f4       	brne	.+6      	; 0x9fc <__addsf3+0x24>
 9f6:	26 f4       	brtc	.+8      	; 0xa00 <__addsf3+0x28>
 9f8:	0c 94 6c 06 	jmp	0xcd8	; 0xcd8 <__fp_nan>
 9fc:	0e f4       	brtc	.+2      	; 0xa00 <__addsf3+0x28>
 9fe:	e0 95       	com	r30
 a00:	e7 fb       	bst	r30, 7
 a02:	0c 94 66 06 	jmp	0xccc	; 0xccc <__fp_inf>

00000a06 <__addsf3x>:
 a06:	e9 2f       	mov	r30, r25
 a08:	0e 94 8e 06 	call	0xd1c	; 0xd1c <__fp_split3>
 a0c:	58 f3       	brcs	.-42     	; 0x9e4 <__addsf3+0xc>
 a0e:	ba 17       	cp	r27, r26
 a10:	62 07       	cpc	r22, r18
 a12:	73 07       	cpc	r23, r19
 a14:	84 07       	cpc	r24, r20
 a16:	95 07       	cpc	r25, r21
 a18:	20 f0       	brcs	.+8      	; 0xa22 <__addsf3x+0x1c>
 a1a:	79 f4       	brne	.+30     	; 0xa3a <__addsf3x+0x34>
 a1c:	a6 f5       	brtc	.+104    	; 0xa86 <__addsf3x+0x80>
 a1e:	0c 94 b0 06 	jmp	0xd60	; 0xd60 <__fp_zero>
 a22:	0e f4       	brtc	.+2      	; 0xa26 <__addsf3x+0x20>
 a24:	e0 95       	com	r30
 a26:	0b 2e       	mov	r0, r27
 a28:	ba 2f       	mov	r27, r26
 a2a:	a0 2d       	mov	r26, r0
 a2c:	0b 01       	movw	r0, r22
 a2e:	b9 01       	movw	r22, r18
 a30:	90 01       	movw	r18, r0
 a32:	0c 01       	movw	r0, r24
 a34:	ca 01       	movw	r24, r20
 a36:	a0 01       	movw	r20, r0
 a38:	11 24       	eor	r1, r1
 a3a:	ff 27       	eor	r31, r31
 a3c:	59 1b       	sub	r21, r25
 a3e:	99 f0       	breq	.+38     	; 0xa66 <__addsf3x+0x60>
 a40:	59 3f       	cpi	r21, 0xF9	; 249
 a42:	50 f4       	brcc	.+20     	; 0xa58 <__addsf3x+0x52>
 a44:	50 3e       	cpi	r21, 0xE0	; 224
 a46:	68 f1       	brcs	.+90     	; 0xaa2 <__addsf3x+0x9c>
 a48:	1a 16       	cp	r1, r26
 a4a:	f0 40       	sbci	r31, 0x00	; 0
 a4c:	a2 2f       	mov	r26, r18
 a4e:	23 2f       	mov	r18, r19
 a50:	34 2f       	mov	r19, r20
 a52:	44 27       	eor	r20, r20
 a54:	58 5f       	subi	r21, 0xF8	; 248
 a56:	f3 cf       	rjmp	.-26     	; 0xa3e <__addsf3x+0x38>
 a58:	46 95       	lsr	r20
 a5a:	37 95       	ror	r19
 a5c:	27 95       	ror	r18
 a5e:	a7 95       	ror	r26
 a60:	f0 40       	sbci	r31, 0x00	; 0
 a62:	53 95       	inc	r21
 a64:	c9 f7       	brne	.-14     	; 0xa58 <__addsf3x+0x52>
 a66:	7e f4       	brtc	.+30     	; 0xa86 <__addsf3x+0x80>
 a68:	1f 16       	cp	r1, r31
 a6a:	ba 0b       	sbc	r27, r26
 a6c:	62 0b       	sbc	r22, r18
 a6e:	73 0b       	sbc	r23, r19
 a70:	84 0b       	sbc	r24, r20
 a72:	ba f0       	brmi	.+46     	; 0xaa2 <__addsf3x+0x9c>
 a74:	91 50       	subi	r25, 0x01	; 1
 a76:	a1 f0       	breq	.+40     	; 0xaa0 <__addsf3x+0x9a>
 a78:	ff 0f       	add	r31, r31
 a7a:	bb 1f       	adc	r27, r27
 a7c:	66 1f       	adc	r22, r22
 a7e:	77 1f       	adc	r23, r23
 a80:	88 1f       	adc	r24, r24
 a82:	c2 f7       	brpl	.-16     	; 0xa74 <__addsf3x+0x6e>
 a84:	0e c0       	rjmp	.+28     	; 0xaa2 <__addsf3x+0x9c>
 a86:	ba 0f       	add	r27, r26
 a88:	62 1f       	adc	r22, r18
 a8a:	73 1f       	adc	r23, r19
 a8c:	84 1f       	adc	r24, r20
 a8e:	48 f4       	brcc	.+18     	; 0xaa2 <__addsf3x+0x9c>
 a90:	87 95       	ror	r24
 a92:	77 95       	ror	r23
 a94:	67 95       	ror	r22
 a96:	b7 95       	ror	r27
 a98:	f7 95       	ror	r31
 a9a:	9e 3f       	cpi	r25, 0xFE	; 254
 a9c:	08 f0       	brcs	.+2      	; 0xaa0 <__addsf3x+0x9a>
 a9e:	b0 cf       	rjmp	.-160    	; 0xa00 <__addsf3+0x28>
 aa0:	93 95       	inc	r25
 aa2:	88 0f       	add	r24, r24
 aa4:	08 f0       	brcs	.+2      	; 0xaa8 <__addsf3x+0xa2>
 aa6:	99 27       	eor	r25, r25
 aa8:	ee 0f       	add	r30, r30
 aaa:	97 95       	ror	r25
 aac:	87 95       	ror	r24
 aae:	08 95       	ret

00000ab0 <__cmpsf2>:
 ab0:	0e 94 42 06 	call	0xc84	; 0xc84 <__fp_cmp>
 ab4:	08 f4       	brcc	.+2      	; 0xab8 <__cmpsf2+0x8>
 ab6:	81 e0       	ldi	r24, 0x01	; 1
 ab8:	08 95       	ret

00000aba <__divsf3>:
 aba:	0e 94 71 05 	call	0xae2	; 0xae2 <__divsf3x>
 abe:	0c 94 7d 06 	jmp	0xcfa	; 0xcfa <__fp_round>
 ac2:	0e 94 76 06 	call	0xcec	; 0xcec <__fp_pscB>
 ac6:	58 f0       	brcs	.+22     	; 0xade <__divsf3+0x24>
 ac8:	0e 94 6f 06 	call	0xcde	; 0xcde <__fp_pscA>
 acc:	40 f0       	brcs	.+16     	; 0xade <__divsf3+0x24>
 ace:	29 f4       	brne	.+10     	; 0xada <__divsf3+0x20>
 ad0:	5f 3f       	cpi	r21, 0xFF	; 255
 ad2:	29 f0       	breq	.+10     	; 0xade <__divsf3+0x24>
 ad4:	0c 94 66 06 	jmp	0xccc	; 0xccc <__fp_inf>
 ad8:	51 11       	cpse	r21, r1
 ada:	0c 94 b1 06 	jmp	0xd62	; 0xd62 <__fp_szero>
 ade:	0c 94 6c 06 	jmp	0xcd8	; 0xcd8 <__fp_nan>

00000ae2 <__divsf3x>:
 ae2:	0e 94 8e 06 	call	0xd1c	; 0xd1c <__fp_split3>
 ae6:	68 f3       	brcs	.-38     	; 0xac2 <__divsf3+0x8>

00000ae8 <__divsf3_pse>:
 ae8:	99 23       	and	r25, r25
 aea:	b1 f3       	breq	.-20     	; 0xad8 <__divsf3+0x1e>
 aec:	55 23       	and	r21, r21
 aee:	91 f3       	breq	.-28     	; 0xad4 <__divsf3+0x1a>
 af0:	95 1b       	sub	r25, r21
 af2:	55 0b       	sbc	r21, r21
 af4:	bb 27       	eor	r27, r27
 af6:	aa 27       	eor	r26, r26
 af8:	62 17       	cp	r22, r18
 afa:	73 07       	cpc	r23, r19
 afc:	84 07       	cpc	r24, r20
 afe:	38 f0       	brcs	.+14     	; 0xb0e <__divsf3_pse+0x26>
 b00:	9f 5f       	subi	r25, 0xFF	; 255
 b02:	5f 4f       	sbci	r21, 0xFF	; 255
 b04:	22 0f       	add	r18, r18
 b06:	33 1f       	adc	r19, r19
 b08:	44 1f       	adc	r20, r20
 b0a:	aa 1f       	adc	r26, r26
 b0c:	a9 f3       	breq	.-22     	; 0xaf8 <__divsf3_pse+0x10>
 b0e:	35 d0       	rcall	.+106    	; 0xb7a <__divsf3_pse+0x92>
 b10:	0e 2e       	mov	r0, r30
 b12:	3a f0       	brmi	.+14     	; 0xb22 <__divsf3_pse+0x3a>
 b14:	e0 e8       	ldi	r30, 0x80	; 128
 b16:	32 d0       	rcall	.+100    	; 0xb7c <__divsf3_pse+0x94>
 b18:	91 50       	subi	r25, 0x01	; 1
 b1a:	50 40       	sbci	r21, 0x00	; 0
 b1c:	e6 95       	lsr	r30
 b1e:	00 1c       	adc	r0, r0
 b20:	ca f7       	brpl	.-14     	; 0xb14 <__divsf3_pse+0x2c>
 b22:	2b d0       	rcall	.+86     	; 0xb7a <__divsf3_pse+0x92>
 b24:	fe 2f       	mov	r31, r30
 b26:	29 d0       	rcall	.+82     	; 0xb7a <__divsf3_pse+0x92>
 b28:	66 0f       	add	r22, r22
 b2a:	77 1f       	adc	r23, r23
 b2c:	88 1f       	adc	r24, r24
 b2e:	bb 1f       	adc	r27, r27
 b30:	26 17       	cp	r18, r22
 b32:	37 07       	cpc	r19, r23
 b34:	48 07       	cpc	r20, r24
 b36:	ab 07       	cpc	r26, r27
 b38:	b0 e8       	ldi	r27, 0x80	; 128
 b3a:	09 f0       	breq	.+2      	; 0xb3e <__divsf3_pse+0x56>
 b3c:	bb 0b       	sbc	r27, r27
 b3e:	80 2d       	mov	r24, r0
 b40:	bf 01       	movw	r22, r30
 b42:	ff 27       	eor	r31, r31
 b44:	93 58       	subi	r25, 0x83	; 131
 b46:	5f 4f       	sbci	r21, 0xFF	; 255
 b48:	3a f0       	brmi	.+14     	; 0xb58 <__divsf3_pse+0x70>
 b4a:	9e 3f       	cpi	r25, 0xFE	; 254
 b4c:	51 05       	cpc	r21, r1
 b4e:	78 f0       	brcs	.+30     	; 0xb6e <__divsf3_pse+0x86>
 b50:	0c 94 66 06 	jmp	0xccc	; 0xccc <__fp_inf>
 b54:	0c 94 b1 06 	jmp	0xd62	; 0xd62 <__fp_szero>
 b58:	5f 3f       	cpi	r21, 0xFF	; 255
 b5a:	e4 f3       	brlt	.-8      	; 0xb54 <__divsf3_pse+0x6c>
 b5c:	98 3e       	cpi	r25, 0xE8	; 232
 b5e:	d4 f3       	brlt	.-12     	; 0xb54 <__divsf3_pse+0x6c>
 b60:	86 95       	lsr	r24
 b62:	77 95       	ror	r23
 b64:	67 95       	ror	r22
 b66:	b7 95       	ror	r27
 b68:	f7 95       	ror	r31
 b6a:	9f 5f       	subi	r25, 0xFF	; 255
 b6c:	c9 f7       	brne	.-14     	; 0xb60 <__divsf3_pse+0x78>
 b6e:	88 0f       	add	r24, r24
 b70:	91 1d       	adc	r25, r1
 b72:	96 95       	lsr	r25
 b74:	87 95       	ror	r24
 b76:	97 f9       	bld	r25, 7
 b78:	08 95       	ret
 b7a:	e1 e0       	ldi	r30, 0x01	; 1
 b7c:	66 0f       	add	r22, r22
 b7e:	77 1f       	adc	r23, r23
 b80:	88 1f       	adc	r24, r24
 b82:	bb 1f       	adc	r27, r27
 b84:	62 17       	cp	r22, r18
 b86:	73 07       	cpc	r23, r19
 b88:	84 07       	cpc	r24, r20
 b8a:	ba 07       	cpc	r27, r26
 b8c:	20 f0       	brcs	.+8      	; 0xb96 <__divsf3_pse+0xae>
 b8e:	62 1b       	sub	r22, r18
 b90:	73 0b       	sbc	r23, r19
 b92:	84 0b       	sbc	r24, r20
 b94:	ba 0b       	sbc	r27, r26
 b96:	ee 1f       	adc	r30, r30
 b98:	88 f7       	brcc	.-30     	; 0xb7c <__divsf3_pse+0x94>
 b9a:	e0 95       	com	r30
 b9c:	08 95       	ret

00000b9e <__fixsfsi>:
 b9e:	0e 94 d6 05 	call	0xbac	; 0xbac <__fixunssfsi>
 ba2:	68 94       	set
 ba4:	b1 11       	cpse	r27, r1
 ba6:	0c 94 b1 06 	jmp	0xd62	; 0xd62 <__fp_szero>
 baa:	08 95       	ret

00000bac <__fixunssfsi>:
 bac:	0e 94 96 06 	call	0xd2c	; 0xd2c <__fp_splitA>
 bb0:	88 f0       	brcs	.+34     	; 0xbd4 <__fixunssfsi+0x28>
 bb2:	9f 57       	subi	r25, 0x7F	; 127
 bb4:	98 f0       	brcs	.+38     	; 0xbdc <__fixunssfsi+0x30>
 bb6:	b9 2f       	mov	r27, r25
 bb8:	99 27       	eor	r25, r25
 bba:	b7 51       	subi	r27, 0x17	; 23
 bbc:	b0 f0       	brcs	.+44     	; 0xbea <__fixunssfsi+0x3e>
 bbe:	e1 f0       	breq	.+56     	; 0xbf8 <__fixunssfsi+0x4c>
 bc0:	66 0f       	add	r22, r22
 bc2:	77 1f       	adc	r23, r23
 bc4:	88 1f       	adc	r24, r24
 bc6:	99 1f       	adc	r25, r25
 bc8:	1a f0       	brmi	.+6      	; 0xbd0 <__fixunssfsi+0x24>
 bca:	ba 95       	dec	r27
 bcc:	c9 f7       	brne	.-14     	; 0xbc0 <__fixunssfsi+0x14>
 bce:	14 c0       	rjmp	.+40     	; 0xbf8 <__fixunssfsi+0x4c>
 bd0:	b1 30       	cpi	r27, 0x01	; 1
 bd2:	91 f0       	breq	.+36     	; 0xbf8 <__fixunssfsi+0x4c>
 bd4:	0e 94 b0 06 	call	0xd60	; 0xd60 <__fp_zero>
 bd8:	b1 e0       	ldi	r27, 0x01	; 1
 bda:	08 95       	ret
 bdc:	0c 94 b0 06 	jmp	0xd60	; 0xd60 <__fp_zero>
 be0:	67 2f       	mov	r22, r23
 be2:	78 2f       	mov	r23, r24
 be4:	88 27       	eor	r24, r24
 be6:	b8 5f       	subi	r27, 0xF8	; 248
 be8:	39 f0       	breq	.+14     	; 0xbf8 <__fixunssfsi+0x4c>
 bea:	b9 3f       	cpi	r27, 0xF9	; 249
 bec:	cc f3       	brlt	.-14     	; 0xbe0 <__fixunssfsi+0x34>
 bee:	86 95       	lsr	r24
 bf0:	77 95       	ror	r23
 bf2:	67 95       	ror	r22
 bf4:	b3 95       	inc	r27
 bf6:	d9 f7       	brne	.-10     	; 0xbee <__fixunssfsi+0x42>
 bf8:	3e f4       	brtc	.+14     	; 0xc08 <__fixunssfsi+0x5c>
 bfa:	90 95       	com	r25
 bfc:	80 95       	com	r24
 bfe:	70 95       	com	r23
 c00:	61 95       	neg	r22
 c02:	7f 4f       	sbci	r23, 0xFF	; 255
 c04:	8f 4f       	sbci	r24, 0xFF	; 255
 c06:	9f 4f       	sbci	r25, 0xFF	; 255
 c08:	08 95       	ret

00000c0a <__floatunsisf>:
 c0a:	e8 94       	clt
 c0c:	09 c0       	rjmp	.+18     	; 0xc20 <__floatsisf+0x12>

00000c0e <__floatsisf>:
 c0e:	97 fb       	bst	r25, 7
 c10:	3e f4       	brtc	.+14     	; 0xc20 <__floatsisf+0x12>
 c12:	90 95       	com	r25
 c14:	80 95       	com	r24
 c16:	70 95       	com	r23
 c18:	61 95       	neg	r22
 c1a:	7f 4f       	sbci	r23, 0xFF	; 255
 c1c:	8f 4f       	sbci	r24, 0xFF	; 255
 c1e:	9f 4f       	sbci	r25, 0xFF	; 255
 c20:	99 23       	and	r25, r25
 c22:	a9 f0       	breq	.+42     	; 0xc4e <__floatsisf+0x40>
 c24:	f9 2f       	mov	r31, r25
 c26:	96 e9       	ldi	r25, 0x96	; 150
 c28:	bb 27       	eor	r27, r27
 c2a:	93 95       	inc	r25
 c2c:	f6 95       	lsr	r31
 c2e:	87 95       	ror	r24
 c30:	77 95       	ror	r23
 c32:	67 95       	ror	r22
 c34:	b7 95       	ror	r27
 c36:	f1 11       	cpse	r31, r1
 c38:	f8 cf       	rjmp	.-16     	; 0xc2a <__floatsisf+0x1c>
 c3a:	fa f4       	brpl	.+62     	; 0xc7a <__floatsisf+0x6c>
 c3c:	bb 0f       	add	r27, r27
 c3e:	11 f4       	brne	.+4      	; 0xc44 <__floatsisf+0x36>
 c40:	60 ff       	sbrs	r22, 0
 c42:	1b c0       	rjmp	.+54     	; 0xc7a <__floatsisf+0x6c>
 c44:	6f 5f       	subi	r22, 0xFF	; 255
 c46:	7f 4f       	sbci	r23, 0xFF	; 255
 c48:	8f 4f       	sbci	r24, 0xFF	; 255
 c4a:	9f 4f       	sbci	r25, 0xFF	; 255
 c4c:	16 c0       	rjmp	.+44     	; 0xc7a <__floatsisf+0x6c>
 c4e:	88 23       	and	r24, r24
 c50:	11 f0       	breq	.+4      	; 0xc56 <__floatsisf+0x48>
 c52:	96 e9       	ldi	r25, 0x96	; 150
 c54:	11 c0       	rjmp	.+34     	; 0xc78 <__floatsisf+0x6a>
 c56:	77 23       	and	r23, r23
 c58:	21 f0       	breq	.+8      	; 0xc62 <__floatsisf+0x54>
 c5a:	9e e8       	ldi	r25, 0x8E	; 142
 c5c:	87 2f       	mov	r24, r23
 c5e:	76 2f       	mov	r23, r22
 c60:	05 c0       	rjmp	.+10     	; 0xc6c <__floatsisf+0x5e>
 c62:	66 23       	and	r22, r22
 c64:	71 f0       	breq	.+28     	; 0xc82 <__floatsisf+0x74>
 c66:	96 e8       	ldi	r25, 0x86	; 134
 c68:	86 2f       	mov	r24, r22
 c6a:	70 e0       	ldi	r23, 0x00	; 0
 c6c:	60 e0       	ldi	r22, 0x00	; 0
 c6e:	2a f0       	brmi	.+10     	; 0xc7a <__floatsisf+0x6c>
 c70:	9a 95       	dec	r25
 c72:	66 0f       	add	r22, r22
 c74:	77 1f       	adc	r23, r23
 c76:	88 1f       	adc	r24, r24
 c78:	da f7       	brpl	.-10     	; 0xc70 <__floatsisf+0x62>
 c7a:	88 0f       	add	r24, r24
 c7c:	96 95       	lsr	r25
 c7e:	87 95       	ror	r24
 c80:	97 f9       	bld	r25, 7
 c82:	08 95       	ret

00000c84 <__fp_cmp>:
 c84:	99 0f       	add	r25, r25
 c86:	00 08       	sbc	r0, r0
 c88:	55 0f       	add	r21, r21
 c8a:	aa 0b       	sbc	r26, r26
 c8c:	e0 e8       	ldi	r30, 0x80	; 128
 c8e:	fe ef       	ldi	r31, 0xFE	; 254
 c90:	16 16       	cp	r1, r22
 c92:	17 06       	cpc	r1, r23
 c94:	e8 07       	cpc	r30, r24
 c96:	f9 07       	cpc	r31, r25
 c98:	c0 f0       	brcs	.+48     	; 0xcca <__fp_cmp+0x46>
 c9a:	12 16       	cp	r1, r18
 c9c:	13 06       	cpc	r1, r19
 c9e:	e4 07       	cpc	r30, r20
 ca0:	f5 07       	cpc	r31, r21
 ca2:	98 f0       	brcs	.+38     	; 0xcca <__fp_cmp+0x46>
 ca4:	62 1b       	sub	r22, r18
 ca6:	73 0b       	sbc	r23, r19
 ca8:	84 0b       	sbc	r24, r20
 caa:	95 0b       	sbc	r25, r21
 cac:	39 f4       	brne	.+14     	; 0xcbc <__fp_cmp+0x38>
 cae:	0a 26       	eor	r0, r26
 cb0:	61 f0       	breq	.+24     	; 0xcca <__fp_cmp+0x46>
 cb2:	23 2b       	or	r18, r19
 cb4:	24 2b       	or	r18, r20
 cb6:	25 2b       	or	r18, r21
 cb8:	21 f4       	brne	.+8      	; 0xcc2 <__fp_cmp+0x3e>
 cba:	08 95       	ret
 cbc:	0a 26       	eor	r0, r26
 cbe:	09 f4       	brne	.+2      	; 0xcc2 <__fp_cmp+0x3e>
 cc0:	a1 40       	sbci	r26, 0x01	; 1
 cc2:	a6 95       	lsr	r26
 cc4:	8f ef       	ldi	r24, 0xFF	; 255
 cc6:	81 1d       	adc	r24, r1
 cc8:	81 1d       	adc	r24, r1
 cca:	08 95       	ret

00000ccc <__fp_inf>:
 ccc:	97 f9       	bld	r25, 7
 cce:	9f 67       	ori	r25, 0x7F	; 127
 cd0:	80 e8       	ldi	r24, 0x80	; 128
 cd2:	70 e0       	ldi	r23, 0x00	; 0
 cd4:	60 e0       	ldi	r22, 0x00	; 0
 cd6:	08 95       	ret

00000cd8 <__fp_nan>:
 cd8:	9f ef       	ldi	r25, 0xFF	; 255
 cda:	80 ec       	ldi	r24, 0xC0	; 192
 cdc:	08 95       	ret

00000cde <__fp_pscA>:
 cde:	00 24       	eor	r0, r0
 ce0:	0a 94       	dec	r0
 ce2:	16 16       	cp	r1, r22
 ce4:	17 06       	cpc	r1, r23
 ce6:	18 06       	cpc	r1, r24
 ce8:	09 06       	cpc	r0, r25
 cea:	08 95       	ret

00000cec <__fp_pscB>:
 cec:	00 24       	eor	r0, r0
 cee:	0a 94       	dec	r0
 cf0:	12 16       	cp	r1, r18
 cf2:	13 06       	cpc	r1, r19
 cf4:	14 06       	cpc	r1, r20
 cf6:	05 06       	cpc	r0, r21
 cf8:	08 95       	ret

00000cfa <__fp_round>:
 cfa:	09 2e       	mov	r0, r25
 cfc:	03 94       	inc	r0
 cfe:	00 0c       	add	r0, r0
 d00:	11 f4       	brne	.+4      	; 0xd06 <__fp_round+0xc>
 d02:	88 23       	and	r24, r24
 d04:	52 f0       	brmi	.+20     	; 0xd1a <__fp_round+0x20>
 d06:	bb 0f       	add	r27, r27
 d08:	40 f4       	brcc	.+16     	; 0xd1a <__fp_round+0x20>
 d0a:	bf 2b       	or	r27, r31
 d0c:	11 f4       	brne	.+4      	; 0xd12 <__fp_round+0x18>
 d0e:	60 ff       	sbrs	r22, 0
 d10:	04 c0       	rjmp	.+8      	; 0xd1a <__fp_round+0x20>
 d12:	6f 5f       	subi	r22, 0xFF	; 255
 d14:	7f 4f       	sbci	r23, 0xFF	; 255
 d16:	8f 4f       	sbci	r24, 0xFF	; 255
 d18:	9f 4f       	sbci	r25, 0xFF	; 255
 d1a:	08 95       	ret

00000d1c <__fp_split3>:
 d1c:	57 fd       	sbrc	r21, 7
 d1e:	90 58       	subi	r25, 0x80	; 128
 d20:	44 0f       	add	r20, r20
 d22:	55 1f       	adc	r21, r21
 d24:	59 f0       	breq	.+22     	; 0xd3c <__fp_splitA+0x10>
 d26:	5f 3f       	cpi	r21, 0xFF	; 255
 d28:	71 f0       	breq	.+28     	; 0xd46 <__fp_splitA+0x1a>
 d2a:	47 95       	ror	r20

00000d2c <__fp_splitA>:
 d2c:	88 0f       	add	r24, r24
 d2e:	97 fb       	bst	r25, 7
 d30:	99 1f       	adc	r25, r25
 d32:	61 f0       	breq	.+24     	; 0xd4c <__fp_splitA+0x20>
 d34:	9f 3f       	cpi	r25, 0xFF	; 255
 d36:	79 f0       	breq	.+30     	; 0xd56 <__fp_splitA+0x2a>
 d38:	87 95       	ror	r24
 d3a:	08 95       	ret
 d3c:	12 16       	cp	r1, r18
 d3e:	13 06       	cpc	r1, r19
 d40:	14 06       	cpc	r1, r20
 d42:	55 1f       	adc	r21, r21
 d44:	f2 cf       	rjmp	.-28     	; 0xd2a <__fp_split3+0xe>
 d46:	46 95       	lsr	r20
 d48:	f1 df       	rcall	.-30     	; 0xd2c <__fp_splitA>
 d4a:	08 c0       	rjmp	.+16     	; 0xd5c <__fp_splitA+0x30>
 d4c:	16 16       	cp	r1, r22
 d4e:	17 06       	cpc	r1, r23
 d50:	18 06       	cpc	r1, r24
 d52:	99 1f       	adc	r25, r25
 d54:	f1 cf       	rjmp	.-30     	; 0xd38 <__fp_splitA+0xc>
 d56:	86 95       	lsr	r24
 d58:	71 05       	cpc	r23, r1
 d5a:	61 05       	cpc	r22, r1
 d5c:	08 94       	sec
 d5e:	08 95       	ret

00000d60 <__fp_zero>:
 d60:	e8 94       	clt

00000d62 <__fp_szero>:
 d62:	bb 27       	eor	r27, r27
 d64:	66 27       	eor	r22, r22
 d66:	77 27       	eor	r23, r23
 d68:	cb 01       	movw	r24, r22
 d6a:	97 f9       	bld	r25, 7
 d6c:	08 95       	ret

00000d6e <__mulsf3>:
 d6e:	0e 94 ca 06 	call	0xd94	; 0xd94 <__mulsf3x>
 d72:	0c 94 7d 06 	jmp	0xcfa	; 0xcfa <__fp_round>
 d76:	0e 94 6f 06 	call	0xcde	; 0xcde <__fp_pscA>
 d7a:	38 f0       	brcs	.+14     	; 0xd8a <__mulsf3+0x1c>
 d7c:	0e 94 76 06 	call	0xcec	; 0xcec <__fp_pscB>
 d80:	20 f0       	brcs	.+8      	; 0xd8a <__mulsf3+0x1c>
 d82:	95 23       	and	r25, r21
 d84:	11 f0       	breq	.+4      	; 0xd8a <__mulsf3+0x1c>
 d86:	0c 94 66 06 	jmp	0xccc	; 0xccc <__fp_inf>
 d8a:	0c 94 6c 06 	jmp	0xcd8	; 0xcd8 <__fp_nan>
 d8e:	11 24       	eor	r1, r1
 d90:	0c 94 b1 06 	jmp	0xd62	; 0xd62 <__fp_szero>

00000d94 <__mulsf3x>:
 d94:	0e 94 8e 06 	call	0xd1c	; 0xd1c <__fp_split3>
 d98:	70 f3       	brcs	.-36     	; 0xd76 <__mulsf3+0x8>

00000d9a <__mulsf3_pse>:
 d9a:	95 9f       	mul	r25, r21
 d9c:	c1 f3       	breq	.-16     	; 0xd8e <__mulsf3+0x20>
 d9e:	95 0f       	add	r25, r21
 da0:	50 e0       	ldi	r21, 0x00	; 0
 da2:	55 1f       	adc	r21, r21
 da4:	62 9f       	mul	r22, r18
 da6:	f0 01       	movw	r30, r0
 da8:	72 9f       	mul	r23, r18
 daa:	bb 27       	eor	r27, r27
 dac:	f0 0d       	add	r31, r0
 dae:	b1 1d       	adc	r27, r1
 db0:	63 9f       	mul	r22, r19
 db2:	aa 27       	eor	r26, r26
 db4:	f0 0d       	add	r31, r0
 db6:	b1 1d       	adc	r27, r1
 db8:	aa 1f       	adc	r26, r26
 dba:	64 9f       	mul	r22, r20
 dbc:	66 27       	eor	r22, r22
 dbe:	b0 0d       	add	r27, r0
 dc0:	a1 1d       	adc	r26, r1
 dc2:	66 1f       	adc	r22, r22
 dc4:	82 9f       	mul	r24, r18
 dc6:	22 27       	eor	r18, r18
 dc8:	b0 0d       	add	r27, r0
 dca:	a1 1d       	adc	r26, r1
 dcc:	62 1f       	adc	r22, r18
 dce:	73 9f       	mul	r23, r19
 dd0:	b0 0d       	add	r27, r0
 dd2:	a1 1d       	adc	r26, r1
 dd4:	62 1f       	adc	r22, r18
 dd6:	83 9f       	mul	r24, r19
 dd8:	a0 0d       	add	r26, r0
 dda:	61 1d       	adc	r22, r1
 ddc:	22 1f       	adc	r18, r18
 dde:	74 9f       	mul	r23, r20
 de0:	33 27       	eor	r19, r19
 de2:	a0 0d       	add	r26, r0
 de4:	61 1d       	adc	r22, r1
 de6:	23 1f       	adc	r18, r19
 de8:	84 9f       	mul	r24, r20
 dea:	60 0d       	add	r22, r0
 dec:	21 1d       	adc	r18, r1
 dee:	82 2f       	mov	r24, r18
 df0:	76 2f       	mov	r23, r22
 df2:	6a 2f       	mov	r22, r26
 df4:	11 24       	eor	r1, r1
 df6:	9f 57       	subi	r25, 0x7F	; 127
 df8:	50 40       	sbci	r21, 0x00	; 0
 dfa:	9a f0       	brmi	.+38     	; 0xe22 <__mulsf3_pse+0x88>
 dfc:	f1 f0       	breq	.+60     	; 0xe3a <__mulsf3_pse+0xa0>
 dfe:	88 23       	and	r24, r24
 e00:	4a f0       	brmi	.+18     	; 0xe14 <__mulsf3_pse+0x7a>
 e02:	ee 0f       	add	r30, r30
 e04:	ff 1f       	adc	r31, r31
 e06:	bb 1f       	adc	r27, r27
 e08:	66 1f       	adc	r22, r22
 e0a:	77 1f       	adc	r23, r23
 e0c:	88 1f       	adc	r24, r24
 e0e:	91 50       	subi	r25, 0x01	; 1
 e10:	50 40       	sbci	r21, 0x00	; 0
 e12:	a9 f7       	brne	.-22     	; 0xdfe <__mulsf3_pse+0x64>
 e14:	9e 3f       	cpi	r25, 0xFE	; 254
 e16:	51 05       	cpc	r21, r1
 e18:	80 f0       	brcs	.+32     	; 0xe3a <__mulsf3_pse+0xa0>
 e1a:	0c 94 66 06 	jmp	0xccc	; 0xccc <__fp_inf>
 e1e:	0c 94 b1 06 	jmp	0xd62	; 0xd62 <__fp_szero>
 e22:	5f 3f       	cpi	r21, 0xFF	; 255
 e24:	e4 f3       	brlt	.-8      	; 0xe1e <__mulsf3_pse+0x84>
 e26:	98 3e       	cpi	r25, 0xE8	; 232
 e28:	d4 f3       	brlt	.-12     	; 0xe1e <__mulsf3_pse+0x84>
 e2a:	86 95       	lsr	r24
 e2c:	77 95       	ror	r23
 e2e:	67 95       	ror	r22
 e30:	b7 95       	ror	r27
 e32:	f7 95       	ror	r31
 e34:	e7 95       	ror	r30
 e36:	9f 5f       	subi	r25, 0xFF	; 255
 e38:	c1 f7       	brne	.-16     	; 0xe2a <__mulsf3_pse+0x90>
 e3a:	fe 2b       	or	r31, r30
 e3c:	88 0f       	add	r24, r24
 e3e:	91 1d       	adc	r25, r1
 e40:	96 95       	lsr	r25
 e42:	87 95       	ror	r24
 e44:	97 f9       	bld	r25, 7
 e46:	08 95       	ret

00000e48 <__udivmodhi4>:
 e48:	aa 1b       	sub	r26, r26
 e4a:	bb 1b       	sub	r27, r27
 e4c:	51 e1       	ldi	r21, 0x11	; 17
 e4e:	07 c0       	rjmp	.+14     	; 0xe5e <__udivmodhi4_ep>

00000e50 <__udivmodhi4_loop>:
 e50:	aa 1f       	adc	r26, r26
 e52:	bb 1f       	adc	r27, r27
 e54:	a6 17       	cp	r26, r22
 e56:	b7 07       	cpc	r27, r23
 e58:	10 f0       	brcs	.+4      	; 0xe5e <__udivmodhi4_ep>
 e5a:	a6 1b       	sub	r26, r22
 e5c:	b7 0b       	sbc	r27, r23

00000e5e <__udivmodhi4_ep>:
 e5e:	88 1f       	adc	r24, r24
 e60:	99 1f       	adc	r25, r25
 e62:	5a 95       	dec	r21
 e64:	a9 f7       	brne	.-22     	; 0xe50 <__udivmodhi4_loop>
 e66:	80 95       	com	r24
 e68:	90 95       	com	r25
 e6a:	bc 01       	movw	r22, r24
 e6c:	cd 01       	movw	r24, r26
 e6e:	08 95       	ret

00000e70 <__divmodsi4>:
 e70:	05 2e       	mov	r0, r21
 e72:	97 fb       	bst	r25, 7
 e74:	1e f4       	brtc	.+6      	; 0xe7c <__divmodsi4+0xc>
 e76:	00 94       	com	r0
 e78:	0e 94 4f 07 	call	0xe9e	; 0xe9e <__negsi2>
 e7c:	57 fd       	sbrc	r21, 7
 e7e:	07 d0       	rcall	.+14     	; 0xe8e <__divmodsi4_neg2>
 e80:	0e 94 57 07 	call	0xeae	; 0xeae <__udivmodsi4>
 e84:	07 fc       	sbrc	r0, 7
 e86:	03 d0       	rcall	.+6      	; 0xe8e <__divmodsi4_neg2>
 e88:	4e f4       	brtc	.+18     	; 0xe9c <__divmodsi4_exit>
 e8a:	0c 94 4f 07 	jmp	0xe9e	; 0xe9e <__negsi2>

00000e8e <__divmodsi4_neg2>:
 e8e:	50 95       	com	r21
 e90:	40 95       	com	r20
 e92:	30 95       	com	r19
 e94:	21 95       	neg	r18
 e96:	3f 4f       	sbci	r19, 0xFF	; 255
 e98:	4f 4f       	sbci	r20, 0xFF	; 255
 e9a:	5f 4f       	sbci	r21, 0xFF	; 255

00000e9c <__divmodsi4_exit>:
 e9c:	08 95       	ret

00000e9e <__negsi2>:
 e9e:	90 95       	com	r25
 ea0:	80 95       	com	r24
 ea2:	70 95       	com	r23
 ea4:	61 95       	neg	r22
 ea6:	7f 4f       	sbci	r23, 0xFF	; 255
 ea8:	8f 4f       	sbci	r24, 0xFF	; 255
 eaa:	9f 4f       	sbci	r25, 0xFF	; 255
 eac:	08 95       	ret

00000eae <__udivmodsi4>:
 eae:	a1 e2       	ldi	r26, 0x21	; 33
 eb0:	1a 2e       	mov	r1, r26
 eb2:	aa 1b       	sub	r26, r26
 eb4:	bb 1b       	sub	r27, r27
 eb6:	fd 01       	movw	r30, r26
 eb8:	0d c0       	rjmp	.+26     	; 0xed4 <__udivmodsi4_ep>

00000eba <__udivmodsi4_loop>:
 eba:	aa 1f       	adc	r26, r26
 ebc:	bb 1f       	adc	r27, r27
 ebe:	ee 1f       	adc	r30, r30
 ec0:	ff 1f       	adc	r31, r31
 ec2:	a2 17       	cp	r26, r18
 ec4:	b3 07       	cpc	r27, r19
 ec6:	e4 07       	cpc	r30, r20
 ec8:	f5 07       	cpc	r31, r21
 eca:	20 f0       	brcs	.+8      	; 0xed4 <__udivmodsi4_ep>
 ecc:	a2 1b       	sub	r26, r18
 ece:	b3 0b       	sbc	r27, r19
 ed0:	e4 0b       	sbc	r30, r20
 ed2:	f5 0b       	sbc	r31, r21

00000ed4 <__udivmodsi4_ep>:
 ed4:	66 1f       	adc	r22, r22
 ed6:	77 1f       	adc	r23, r23
 ed8:	88 1f       	adc	r24, r24
 eda:	99 1f       	adc	r25, r25
 edc:	1a 94       	dec	r1
 ede:	69 f7       	brne	.-38     	; 0xeba <__udivmodsi4_loop>
 ee0:	60 95       	com	r22
 ee2:	70 95       	com	r23
 ee4:	80 95       	com	r24
 ee6:	90 95       	com	r25
 ee8:	9b 01       	movw	r18, r22
 eea:	ac 01       	movw	r20, r24
 eec:	bd 01       	movw	r22, r26
 eee:	cf 01       	movw	r24, r30
 ef0:	08 95       	ret

00000ef2 <_exit>:
 ef2:	f8 94       	cli

00000ef4 <__stop_program>:
 ef4:	ff cf       	rjmp	.-2      	; 0xef4 <__stop_program>
