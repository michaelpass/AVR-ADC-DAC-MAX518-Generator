
Lab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800100  000003f6  0000048a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000045  0080012c  0080012c  000004b6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000528  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c70  00000000  00000000  000005b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000086f  00000000  00000000  00001220  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000588  00000000  00000000  00001a8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000168  00000000  00000000  00002018  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004cd  00000000  00000000  00002180  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000515  00000000  00000000  0000264d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00002b62  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__ctors_end>
   4:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
   8:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
   c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  10:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  14:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  18:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  1c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  20:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  24:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  28:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  2c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  30:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  34:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  38:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  3c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  40:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  44:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  48:	0c 94 26 01 	jmp	0x24c	; 0x24c <__vector_18>
  4c:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <__vector_19>
  50:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  54:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  58:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  5c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  60:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  64:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	42 75       	andi	r20, 0x52	; 82
  6a:	66 66       	ori	r22, 0x66	; 102
  6c:	65 72       	andi	r22, 0x25	; 37
  6e:	20 6f       	ori	r18, 0xF0	; 240
  70:	76 65       	ori	r23, 0x56	; 86
  72:	72 66       	ori	r23, 0x62	; 98
  74:	6c 6f       	ori	r22, 0xFC	; 252
  76:	77 20       	and	r7, r7
  78:	65 72       	andi	r22, 0x25	; 37
  7a:	72 6f       	ori	r23, 0xF2	; 242
  7c:	72 3a       	cpi	r23, 0xA2	; 162
  7e:	20 00       	.word	0x0020	; ????

00000080 <__c.2091>:
  80:	55 41 52 54 20 4f 76 65 72 72 75 6e 20 45 72 72     UART Overrun Err
  90:	6f 72 3a 20 00                                      or: .

00000095 <__c.2089>:
  95:	55 41 52 54 20 46 72 61 6d 65 20 45 72 72 6f 72     UART Frame Error
  a5:	3a 20 00                                            : .

000000a8 <__ctors_end>:
  a8:	11 24       	eor	r1, r1
  aa:	1f be       	out	0x3f, r1	; 63
  ac:	cf ef       	ldi	r28, 0xFF	; 255
  ae:	d8 e0       	ldi	r29, 0x08	; 8
  b0:	de bf       	out	0x3e, r29	; 62
  b2:	cd bf       	out	0x3d, r28	; 61

000000b4 <__do_copy_data>:
  b4:	11 e0       	ldi	r17, 0x01	; 1
  b6:	a0 e0       	ldi	r26, 0x00	; 0
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	e6 ef       	ldi	r30, 0xF6	; 246
  bc:	f3 e0       	ldi	r31, 0x03	; 3
  be:	02 c0       	rjmp	.+4      	; 0xc4 <__do_copy_data+0x10>
  c0:	05 90       	lpm	r0, Z+
  c2:	0d 92       	st	X+, r0
  c4:	ac 32       	cpi	r26, 0x2C	; 44
  c6:	b1 07       	cpc	r27, r17
  c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0xc>

000000ca <__do_clear_bss>:
  ca:	21 e0       	ldi	r18, 0x01	; 1
  cc:	ac e2       	ldi	r26, 0x2C	; 44
  ce:	b1 e0       	ldi	r27, 0x01	; 1
  d0:	01 c0       	rjmp	.+2      	; 0xd4 <.do_clear_bss_start>

000000d2 <.do_clear_bss_loop>:
  d2:	1d 92       	st	X+, r1

000000d4 <.do_clear_bss_start>:
  d4:	a1 37       	cpi	r26, 0x71	; 113
  d6:	b2 07       	cpc	r27, r18
  d8:	e1 f7       	brne	.-8      	; 0xd2 <.do_clear_bss_loop>
  da:	0e 94 db 00 	call	0x1b6	; 0x1b6 <main>
  de:	0c 94 f9 01 	jmp	0x3f2	; 0x3f2 <_exit>

000000e2 <__bad_interrupt>:
  e2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e6 <itoa16>:
/* Define UART buad rate here */
#define UART_BAUD_RATE      9600      


void itoa16(uint16_t value, char *str)
{
  e6:	ef 92       	push	r14
  e8:	ff 92       	push	r15
  ea:	0f 93       	push	r16
  ec:	1f 93       	push	r17
  ee:	cf 93       	push	r28
  f0:	df 93       	push	r29
  f2:	00 d0       	rcall	.+0      	; 0xf4 <itoa16+0xe>
  f4:	00 d0       	rcall	.+0      	; 0xf6 <itoa16+0x10>
  f6:	00 d0       	rcall	.+0      	; 0xf8 <itoa16+0x12>
  f8:	cd b7       	in	r28, 0x3d	; 61
  fa:	de b7       	in	r29, 0x3e	; 62
  fc:	ac 01       	movw	r20, r24
  fe:	fb 01       	movw	r30, r22
	// Buffer to store the ASCII string
	char buffer[6];

	int8_t index = 0;
 100:	90 e0       	ldi	r25, 0x00	; 0

	// Convert value to ASCII
	do
	{
		buffer[index++] = '0' + (value % 10);
 102:	0a e0       	ldi	r16, 0x0A	; 10
 104:	10 e0       	ldi	r17, 0x00	; 0
 106:	21 e0       	ldi	r18, 0x01	; 1
 108:	29 0f       	add	r18, r25
 10a:	ee 24       	eor	r14, r14
 10c:	e3 94       	inc	r14
 10e:	f1 2c       	mov	r15, r1
 110:	ec 0e       	add	r14, r28
 112:	fd 1e       	adc	r15, r29
 114:	e9 0e       	add	r14, r25
 116:	f1 1c       	adc	r15, r1
 118:	97 fd       	sbrc	r25, 7
 11a:	fa 94       	dec	r15
 11c:	ca 01       	movw	r24, r20
 11e:	b8 01       	movw	r22, r16
 120:	0e 94 e5 01 	call	0x3ca	; 0x3ca <__udivmodhi4>
 124:	80 5d       	subi	r24, 0xD0	; 208
 126:	d7 01       	movw	r26, r14
 128:	8c 93       	st	X, r24
		value /= 10;
 12a:	ab 01       	movw	r20, r22
 12c:	92 2f       	mov	r25, r18
	} while (value > 0);
 12e:	67 2b       	or	r22, r23
 130:	51 f7       	brne	.-44     	; 0x106 <itoa16+0x20>
 132:	bf 01       	movw	r22, r30
 134:	82 2f       	mov	r24, r18

	// Copy characters from buffer to str in reverse order
	while (index > 0)
 136:	18 16       	cp	r1, r24
 138:	6c f4       	brge	.+26     	; 0x154 <itoa16+0x6e>
 13a:	81 50       	subi	r24, 0x01	; 1
	{
		*str++ = buffer[--index];
 13c:	41 e0       	ldi	r20, 0x01	; 1
 13e:	50 e0       	ldi	r21, 0x00	; 0
 140:	4c 0f       	add	r20, r28
 142:	5d 1f       	adc	r21, r29
 144:	48 0f       	add	r20, r24
 146:	51 1d       	adc	r21, r1
 148:	da 01       	movw	r26, r20
 14a:	9c 91       	ld	r25, X
 14c:	db 01       	movw	r26, r22
 14e:	9d 93       	st	X+, r25
 150:	bd 01       	movw	r22, r26
 152:	f1 cf       	rjmp	.-30     	; 0x136 <itoa16+0x50>
	}

	// Null-terminate the string
	*str = '\0';
 154:	82 2f       	mov	r24, r18
 156:	27 fd       	sbrc	r18, 7
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	e8 0f       	add	r30, r24
 15c:	f1 1d       	adc	r31, r1
 15e:	87 fd       	sbrc	r24, 7
 160:	fa 95       	dec	r31
 162:	10 82       	st	Z, r1
}
 164:	26 96       	adiw	r28, 0x06	; 6
 166:	0f b6       	in	r0, 0x3f	; 63
 168:	f8 94       	cli
 16a:	de bf       	out	0x3e, r29	; 62
 16c:	0f be       	out	0x3f, r0	; 63
 16e:	cd bf       	out	0x3d, r28	; 61
 170:	df 91       	pop	r29
 172:	cf 91       	pop	r28
 174:	1f 91       	pop	r17
 176:	0f 91       	pop	r16
 178:	ff 90       	pop	r15
 17a:	ef 90       	pop	r14
 17c:	08 95       	ret

0000017e <ADC_Init>:

void ADC_Init()
{
	// Set ADC reference to AVCC (5V)
	ADMUX |= (1 << REFS0);
 17e:	ec e7       	ldi	r30, 0x7C	; 124
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	80 81       	ld	r24, Z
 184:	80 64       	ori	r24, 0x40	; 64
 186:	80 83       	st	Z, r24
	ADMUX &= ~(1 << REFS1);
 188:	80 81       	ld	r24, Z
 18a:	8f 77       	andi	r24, 0x7F	; 127
 18c:	80 83       	st	Z, r24

	// Enable ADC and set ADC prescaler to 128 for 16MHz system clock
	ADCSRA |= (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
 18e:	ea e7       	ldi	r30, 0x7A	; 122
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	80 81       	ld	r24, Z
 194:	87 68       	ori	r24, 0x87	; 135
 196:	80 83       	st	Z, r24
 198:	08 95       	ret

0000019a <ADC_Read>:

// Function to read analog value from ADC0
uint16_t ADC_Read()
{
	// Start ADC conversion
	ADCSRA |= (1 << ADSC);
 19a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 19e:	80 64       	ori	r24, 0x40	; 64
 1a0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>

	// Wait for ADC conversion to complete
	while (ADCSRA & (1 << ADSC));
 1a4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 1a8:	86 fd       	sbrc	r24, 6
 1aa:	fc cf       	rjmp	.-8      	; 0x1a4 <ADC_Read+0xa>

	// Return ADC value
	return ADC;
 1ac:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 1b0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 1b4:	08 95       	ret

000001b6 <main>:


int main(void)
{
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
 1ba:	cd b7       	in	r28, 0x3d	; 61
 1bc:	de b7       	in	r29, 0x3e	; 62
 1be:	27 97       	sbiw	r28, 0x07	; 7
 1c0:	0f b6       	in	r0, 0x3f	; 63
 1c2:	f8 94       	cli
 1c4:	de bf       	out	0x3e, r29	; 62
 1c6:	0f be       	out	0x3f, r0	; 63
 1c8:	cd bf       	out	0x3d, r28	; 61
    unsigned int c;
	uint16_t ADC_value;
	
    uart_init( UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU) ); 
 1ca:	87 e6       	ldi	r24, 0x67	; 103
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	0e 94 7e 01 	call	0x2fc	; 0x2fc <uart_init>
    
    /*
     * now enable interrupt, since UART library is interrupt controlled
     */
    sei();
 1d2:	78 94       	sei
	
	ADC_Init();
 1d4:	0e 94 bf 00 	call	0x17e	; 0x17e <ADC_Init>
   
    uart_puts("Welcome to program.\n");
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	91 e0       	ldi	r25, 0x01	; 1
 1dc:	0e 94 ca 01 	call	0x394	; 0x394 <uart_puts>
	uart_puts("Please enter command:\n");
 1e0:	85 e1       	ldi	r24, 0x15	; 21
 1e2:	91 e0       	ldi	r25, 0x01	; 1
 1e4:	0e 94 ca 01 	call	0x394	; 0x394 <uart_puts>
    
    while(1)
    {
        
		
        c = uart_getc();
 1e8:	0e 94 97 01 	call	0x32e	; 0x32e <uart_getc>
 1ec:	8c 01       	movw	r16, r24
		ADC_value = ADC_Read();
 1ee:	0e 94 cd 00 	call	0x19a	; 0x19a <ADC_Read>
		
		char digitString[7];
		
		itoa16(ADC_value, digitString);
 1f2:	be 01       	movw	r22, r28
 1f4:	6f 5f       	subi	r22, 0xFF	; 255
 1f6:	7f 4f       	sbci	r23, 0xFF	; 255
 1f8:	0e 94 73 00 	call	0xe6	; 0xe6 <itoa16>
		
		uart_puts(digitString);
 1fc:	ce 01       	movw	r24, r28
 1fe:	01 96       	adiw	r24, 0x01	; 1
 200:	0e 94 ca 01 	call	0x394	; 0x394 <uart_puts>
		
		uart_putc('\n');
 204:	8a e0       	ldi	r24, 0x0A	; 10
 206:	0e 94 b5 01 	call	0x36a	; 0x36a <uart_putc>
		
        if ( c & UART_NO_DATA )
 20a:	10 fd       	sbrc	r17, 0
 20c:	15 c0       	rjmp	.+42     	; 0x238 <main+0x82>
        {
            /*
             * new data available from UART
             * check for Frame or Overrun error
             */
            if ( c & UART_FRAME_ERROR )
 20e:	14 ff       	sbrs	r17, 4
 210:	04 c0       	rjmp	.+8      	; 0x21a <main+0x64>
            {
                /* Framing Error detected, i.e no stop bit detected */
                uart_puts_P("UART Frame Error: ");
 212:	85 e9       	ldi	r24, 0x95	; 149
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	0e 94 d6 01 	call	0x3ac	; 0x3ac <uart_puts_p>
            }
            if ( c & UART_OVERRUN_ERROR )
 21a:	13 ff       	sbrs	r17, 3
 21c:	04 c0       	rjmp	.+8      	; 0x226 <main+0x70>
                /* 
                 * Overrun, a character already present in the UART UDR register was 
                 * not read by the interrupt handler before the next character arrived,
                 * one or more received characters have been dropped
                 */
                uart_puts_P("UART Overrun Error: ");
 21e:	80 e8       	ldi	r24, 0x80	; 128
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	0e 94 d6 01 	call	0x3ac	; 0x3ac <uart_puts_p>
            }
            if ( c & UART_BUFFER_OVERFLOW )
 226:	11 ff       	sbrs	r17, 1
 228:	04 c0       	rjmp	.+8      	; 0x232 <main+0x7c>
            {
                /* 
                 * We are not reading the receive buffer fast enough,
                 * one or more received character have been dropped 
                 */
                uart_puts_P("Buffer overflow error: ");
 22a:	88 e6       	ldi	r24, 0x68	; 104
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	0e 94 d6 01 	call	0x3ac	; 0x3ac <uart_puts_p>
            }
            /* 
             * send received character back
             */
            uart_putc( (unsigned char)c );
 232:	80 2f       	mov	r24, r16
 234:	0e 94 b5 01 	call	0x36a	; 0x36a <uart_putc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 238:	2f ef       	ldi	r18, 0xFF	; 255
 23a:	83 ed       	ldi	r24, 0xD3	; 211
 23c:	90 e3       	ldi	r25, 0x30	; 48
 23e:	21 50       	subi	r18, 0x01	; 1
 240:	80 40       	sbci	r24, 0x00	; 0
 242:	90 40       	sbci	r25, 0x00	; 0
 244:	e1 f7       	brne	.-8      	; 0x23e <main+0x88>
 246:	00 c0       	rjmp	.+0      	; 0x248 <main+0x92>
 248:	00 00       	nop
		_delay_ms(1000.0);
		
		
		
		
    }
 24a:	ce cf       	rjmp	.-100    	; 0x1e8 <main+0x32>

0000024c <__vector_18>:
ISR (UART0_RECEIVE_INTERRUPT)	
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
 24c:	1f 92       	push	r1
 24e:	0f 92       	push	r0
 250:	0f b6       	in	r0, 0x3f	; 63
 252:	0f 92       	push	r0
 254:	11 24       	eor	r1, r1
 256:	2f 93       	push	r18
 258:	8f 93       	push	r24
 25a:	9f 93       	push	r25
 25c:	ef 93       	push	r30
 25e:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */
    usr  = UART0_STATUS;
 260:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    data = UART0_DATA;
 264:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    
    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
#if defined(FE) && defined(DOR) && defined(UPE)
    lastRxError = usr & (_BV(FE)|_BV(DOR)|_BV(UPE) );
#elif defined(FE0) && defined(DOR0) && defined(UPE0)
    lastRxError = usr & (_BV(FE0)|_BV(DOR0)|_BV(UPE0) );
 268:	8c 71       	andi	r24, 0x1C	; 28
#elif defined(FE) && defined(DOR)
    lastRxError = usr & (_BV(FE)|_BV(DOR) );
#endif

    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
 26a:	e0 91 2e 01 	lds	r30, 0x012E	; 0x80012e <UART_RxHead>
 26e:	ef 5f       	subi	r30, 0xFF	; 255
 270:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART_RxTail ) {
 272:	20 91 2d 01 	lds	r18, 0x012D	; 0x80012d <UART_RxTail>
 276:	e2 17       	cp	r30, r18
 278:	39 f0       	breq	.+14     	; 0x288 <__vector_18+0x3c>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
 27a:	e0 93 2e 01 	sts	0x012E, r30	; 0x80012e <UART_RxHead>
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	ef 5c       	subi	r30, 0xCF	; 207
 282:	fe 4f       	sbci	r31, 0xFE	; 254
 284:	90 83       	st	Z, r25
 286:	01 c0       	rjmp	.+2      	; 0x28a <__vector_18+0x3e>
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 288:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;   
 28a:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <__data_end>
 28e:	89 2b       	or	r24, r25
 290:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__data_end>
}
 294:	ff 91       	pop	r31
 296:	ef 91       	pop	r30
 298:	9f 91       	pop	r25
 29a:	8f 91       	pop	r24
 29c:	2f 91       	pop	r18
 29e:	0f 90       	pop	r0
 2a0:	0f be       	out	0x3f, r0	; 63
 2a2:	0f 90       	pop	r0
 2a4:	1f 90       	pop	r1
 2a6:	18 95       	reti

000002a8 <__vector_19>:
ISR (UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
 2a8:	1f 92       	push	r1
 2aa:	0f 92       	push	r0
 2ac:	0f b6       	in	r0, 0x3f	; 63
 2ae:	0f 92       	push	r0
 2b0:	11 24       	eor	r1, r1
 2b2:	8f 93       	push	r24
 2b4:	9f 93       	push	r25
 2b6:	ef 93       	push	r30
 2b8:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
 2ba:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <UART_TxHead>
 2be:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <UART_TxTail>
 2c2:	98 17       	cp	r25, r24
 2c4:	69 f0       	breq	.+26     	; 0x2e0 <__vector_19+0x38>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 2c6:	e0 91 2f 01 	lds	r30, 0x012F	; 0x80012f <UART_TxTail>
 2ca:	ef 5f       	subi	r30, 0xFF	; 255
 2cc:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
 2ce:	e0 93 2f 01 	sts	0x012F, r30	; 0x80012f <UART_TxTail>
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	ef 5a       	subi	r30, 0xAF	; 175
 2d6:	fe 4f       	sbci	r31, 0xFE	; 254
 2d8:	80 81       	ld	r24, Z
 2da:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 2de:	05 c0       	rjmp	.+10     	; 0x2ea <__vector_19+0x42>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 2e0:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 2e4:	8f 7d       	andi	r24, 0xDF	; 223
 2e6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    }
}
 2ea:	ff 91       	pop	r31
 2ec:	ef 91       	pop	r30
 2ee:	9f 91       	pop	r25
 2f0:	8f 91       	pop	r24
 2f2:	0f 90       	pop	r0
 2f4:	0f be       	out	0x3f, r0	; 63
 2f6:	0f 90       	pop	r0
 2f8:	1f 90       	pop	r1
 2fa:	18 95       	reti

000002fc <uart_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
 2fc:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <UART_TxHead>
    UART_TxTail = 0;
 300:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <UART_TxTail>
    UART_RxHead = 0;
 304:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <UART_RxHead>
    UART_RxTail = 0;
 308:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <UART_RxTail>
#endif
#endif
#endif

    /* Set baud rate */
    if ( baudrate & 0x8000 )
 30c:	97 ff       	sbrs	r25, 7
 30e:	03 c0       	rjmp	.+6      	; 0x316 <uart_init+0x1a>
    {
        #if UART0_BIT_U2X
        UART0_STATUS = (1<<UART0_BIT_U2X);  //Enable 2x speed 
 310:	22 e0       	ldi	r18, 0x02	; 2
 312:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
        #endif
    } 
    #if defined(UART0_UBRRH)
    UART0_UBRRH = (unsigned char)((baudrate>>8)&0x80) ;
 316:	90 78       	andi	r25, 0x80	; 128
 318:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    #endif    
    UART0_UBRRL = (unsigned char) (baudrate&0x00FF);
 31c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
      
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(UART0_BIT_RXCIE)|(1<<UART0_BIT_RXEN)|(1<<UART0_BIT_TXEN);
 320:	88 e9       	ldi	r24, 0x98	; 152
 322:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef UART0_CONTROLC
    #ifdef UART0_BIT_URSEL
    UART0_CONTROLC = (1<<UART0_BIT_URSEL)|(1<<UART0_BIT_UCSZ1)|(1<<UART0_BIT_UCSZ0);
    #else
    UART0_CONTROLC = (1<<UART0_BIT_UCSZ1)|(1<<UART0_BIT_UCSZ0);
 326:	86 e0       	ldi	r24, 0x06	; 6
 328:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 32c:	08 95       	ret

0000032e <uart_getc>:
    unsigned char tmptail;
    unsigned char data;
    unsigned char lastRxError;


    if ( UART_RxHead == UART_RxTail ) {
 32e:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <UART_RxHead>
 332:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <UART_RxTail>
 336:	98 17       	cp	r25, r24
 338:	a9 f0       	breq	.+42     	; 0x364 <uart_getc+0x36>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
 33a:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <UART_RxTail>
 33e:	9f 5f       	subi	r25, 0xFF	; 255
 340:	9f 71       	andi	r25, 0x1F	; 31
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
 342:	e9 2f       	mov	r30, r25
 344:	f0 e0       	ldi	r31, 0x00	; 0
 346:	ef 5c       	subi	r30, 0xCF	; 207
 348:	fe 4f       	sbci	r31, 0xFE	; 254
 34a:	20 81       	ld	r18, Z
    lastRxError = UART_LastRxError;
 34c:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <__data_end>
    
    /* store buffer index */
    UART_RxTail = tmptail; 
 350:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <UART_RxTail>
    
    UART_LastRxError = 0;
 354:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <__data_end>
    return (lastRxError << 8) + data;
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	98 2f       	mov	r25, r24
 35c:	88 27       	eor	r24, r24
 35e:	82 0f       	add	r24, r18
 360:	91 1d       	adc	r25, r1
 362:	08 95       	ret
    unsigned char data;
    unsigned char lastRxError;


    if ( UART_RxHead == UART_RxTail ) {
        return UART_NO_DATA;   /* no data available */
 364:	80 e0       	ldi	r24, 0x00	; 0
 366:	91 e0       	ldi	r25, 0x01	; 1
    UART_RxTail = tmptail; 
    
    UART_LastRxError = 0;
    return (lastRxError << 8) + data;

}/* uart_getc */
 368:	08 95       	ret

0000036a <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 36a:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <UART_TxHead>
 36e:	9f 5f       	subi	r25, 0xFF	; 255
 370:	9f 71       	andi	r25, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
 372:	20 91 2f 01 	lds	r18, 0x012F	; 0x80012f <UART_TxTail>
 376:	92 17       	cp	r25, r18
 378:	e1 f3       	breq	.-8      	; 0x372 <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
 37a:	e9 2f       	mov	r30, r25
 37c:	f0 e0       	ldi	r31, 0x00	; 0
 37e:	ef 5a       	subi	r30, 0xAF	; 175
 380:	fe 4f       	sbci	r31, 0xFE	; 254
 382:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
 384:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
 388:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 38c:	80 62       	ori	r24, 0x20	; 32
 38e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 392:	08 95       	ret

00000394 <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
 394:	cf 93       	push	r28
 396:	df 93       	push	r29
 398:	ec 01       	movw	r28, r24
    while (*s) 
 39a:	89 91       	ld	r24, Y+
 39c:	88 23       	and	r24, r24
 39e:	19 f0       	breq	.+6      	; 0x3a6 <uart_puts+0x12>
      uart_putc(*s++);
 3a0:	0e 94 b5 01 	call	0x36a	; 0x36a <uart_putc>
 3a4:	fa cf       	rjmp	.-12     	; 0x39a <uart_puts+0x6>

}/* uart_puts */
 3a6:	df 91       	pop	r29
 3a8:	cf 91       	pop	r28
 3aa:	08 95       	ret

000003ac <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
 3ac:	cf 93       	push	r28
 3ae:	df 93       	push	r29
 3b0:	fc 01       	movw	r30, r24
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
 3b2:	84 91       	lpm	r24, Z
 3b4:	ef 01       	movw	r28, r30
 3b6:	21 96       	adiw	r28, 0x01	; 1
 3b8:	88 23       	and	r24, r24
 3ba:	21 f0       	breq	.+8      	; 0x3c4 <uart_puts_p+0x18>
      uart_putc(c);
 3bc:	0e 94 b5 01 	call	0x36a	; 0x36a <uart_putc>
 3c0:	fe 01       	movw	r30, r28
 3c2:	f7 cf       	rjmp	.-18     	; 0x3b2 <uart_puts_p+0x6>

}/* uart_puts_p */
 3c4:	df 91       	pop	r29
 3c6:	cf 91       	pop	r28
 3c8:	08 95       	ret

000003ca <__udivmodhi4>:
 3ca:	aa 1b       	sub	r26, r26
 3cc:	bb 1b       	sub	r27, r27
 3ce:	51 e1       	ldi	r21, 0x11	; 17
 3d0:	07 c0       	rjmp	.+14     	; 0x3e0 <__udivmodhi4_ep>

000003d2 <__udivmodhi4_loop>:
 3d2:	aa 1f       	adc	r26, r26
 3d4:	bb 1f       	adc	r27, r27
 3d6:	a6 17       	cp	r26, r22
 3d8:	b7 07       	cpc	r27, r23
 3da:	10 f0       	brcs	.+4      	; 0x3e0 <__udivmodhi4_ep>
 3dc:	a6 1b       	sub	r26, r22
 3de:	b7 0b       	sbc	r27, r23

000003e0 <__udivmodhi4_ep>:
 3e0:	88 1f       	adc	r24, r24
 3e2:	99 1f       	adc	r25, r25
 3e4:	5a 95       	dec	r21
 3e6:	a9 f7       	brne	.-22     	; 0x3d2 <__udivmodhi4_loop>
 3e8:	80 95       	com	r24
 3ea:	90 95       	com	r25
 3ec:	bc 01       	movw	r22, r24
 3ee:	cd 01       	movw	r24, r26
 3f0:	08 95       	ret

000003f2 <_exit>:
 3f2:	f8 94       	cli

000003f4 <__stop_program>:
 3f4:	ff cf       	rjmp	.-2      	; 0x3f4 <__stop_program>
